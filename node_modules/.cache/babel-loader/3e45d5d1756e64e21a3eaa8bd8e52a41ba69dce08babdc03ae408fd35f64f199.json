{"ast":null,"code":"/**\n * @import {HtmlOptions as Options} from 'micromark-extension-math'\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\nimport katex from 'katex';\nconst renderToString = katex.renderToString;\n\n/**\n * Create an extension for `micromark` to support math when serializing to\n * HTML.\n *\n * > ðŸ‘‰ **Note**: this uses KaTeX to render math.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration (default: `{}`).\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions`, to\n *   support math when serializing to HTML.\n */\nexport function mathHtml(options) {\n  return {\n    enter: {\n      mathFlow() {\n        this.lineEndingIfNeeded();\n        this.tag('<div class=\"math math-display\">');\n      },\n      mathFlowFenceMeta() {\n        this.buffer();\n      },\n      mathText() {\n        // Double?\n        this.tag('<span class=\"math math-inline\">');\n        this.buffer();\n      }\n    },\n    exit: {\n      mathFlow() {\n        const value = this.resume();\n        this.tag(math(value.replace(/(?:\\r?\\n|\\r)$/, ''), true));\n        this.tag('</div>');\n        this.setData('mathFlowOpen');\n        this.setData('slurpOneLineEnding');\n      },\n      mathFlowFence() {\n        // After the first fence.\n        if (!this.getData('mathFlowOpen')) {\n          this.setData('mathFlowOpen', true);\n          this.setData('slurpOneLineEnding', true);\n          this.buffer();\n        }\n      },\n      mathFlowFenceMeta() {\n        this.resume();\n      },\n      mathFlowValue(token) {\n        this.raw(this.sliceSerialize(token));\n      },\n      mathText() {\n        const value = this.resume();\n        this.tag(math(value, false));\n        this.tag('</span>');\n      },\n      mathTextData(token) {\n        this.raw(this.sliceSerialize(token));\n      }\n    }\n  };\n\n  /**\n   * @param {string} value\n   *   Math text.\n   * @param {boolean} displayMode\n   *   Whether the math is in display mode.\n   * @returns {string}\n   *   HTML.\n   */\n  function math(value, displayMode) {\n    return renderToString(value, {\n      ...options,\n      displayMode\n    });\n  }\n}","map":{"version":3,"names":["katex","renderToString","mathHtml","options","enter","mathFlow","lineEndingIfNeeded","tag","mathFlowFenceMeta","buffer","mathText","exit","value","resume","math","replace","setData","mathFlowFence","getData","mathFlowValue","token","raw","sliceSerialize","mathTextData","displayMode"],"sources":["/Users/mac/Documents/Career/Website/node_modules/micromark-extension-math/lib/html.js"],"sourcesContent":["/**\n * @import {HtmlOptions as Options} from 'micromark-extension-math'\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\nimport katex from 'katex';\nconst renderToString = katex.renderToString;\n\n/**\n * Create an extension for `micromark` to support math when serializing to\n * HTML.\n *\n * > ðŸ‘‰ **Note**: this uses KaTeX to render math.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration (default: `{}`).\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions`, to\n *   support math when serializing to HTML.\n */\nexport function mathHtml(options) {\n  return {\n    enter: {\n      mathFlow() {\n        this.lineEndingIfNeeded();\n        this.tag('<div class=\"math math-display\">');\n      },\n      mathFlowFenceMeta() {\n        this.buffer();\n      },\n      mathText() {\n        // Double?\n        this.tag('<span class=\"math math-inline\">');\n        this.buffer();\n      }\n    },\n    exit: {\n      mathFlow() {\n        const value = this.resume();\n        this.tag(math(value.replace(/(?:\\r?\\n|\\r)$/, ''), true));\n        this.tag('</div>');\n        this.setData('mathFlowOpen');\n        this.setData('slurpOneLineEnding');\n      },\n      mathFlowFence() {\n        // After the first fence.\n        if (!this.getData('mathFlowOpen')) {\n          this.setData('mathFlowOpen', true);\n          this.setData('slurpOneLineEnding', true);\n          this.buffer();\n        }\n      },\n      mathFlowFenceMeta() {\n        this.resume();\n      },\n      mathFlowValue(token) {\n        this.raw(this.sliceSerialize(token));\n      },\n      mathText() {\n        const value = this.resume();\n        this.tag(math(value, false));\n        this.tag('</span>');\n      },\n      mathTextData(token) {\n        this.raw(this.sliceSerialize(token));\n      }\n    }\n  };\n\n  /**\n   * @param {string} value\n   *   Math text.\n   * @param {boolean} displayMode\n   *   Whether the math is in display mode.\n   * @returns {string}\n   *   HTML.\n   */\n  function math(value, displayMode) {\n    return renderToString(value, {\n      ...options,\n      displayMode\n    });\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,cAAc,GAAGD,KAAK,CAACC,cAAc;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,OAAO,EAAE;EAChC,OAAO;IACLC,KAAK,EAAE;MACLC,QAAQA,CAAA,EAAG;QACT,IAAI,CAACC,kBAAkB,CAAC,CAAC;QACzB,IAAI,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC7C,CAAC;MACDC,iBAAiBA,CAAA,EAAG;QAClB,IAAI,CAACC,MAAM,CAAC,CAAC;MACf,CAAC;MACDC,QAAQA,CAAA,EAAG;QACT;QACA,IAAI,CAACH,GAAG,CAAC,iCAAiC,CAAC;QAC3C,IAAI,CAACE,MAAM,CAAC,CAAC;MACf;IACF,CAAC;IACDE,IAAI,EAAE;MACJN,QAAQA,CAAA,EAAG;QACT,MAAMO,KAAK,GAAG,IAAI,CAACC,MAAM,CAAC,CAAC;QAC3B,IAAI,CAACN,GAAG,CAACO,IAAI,CAACF,KAAK,CAACG,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QACxD,IAAI,CAACR,GAAG,CAAC,QAAQ,CAAC;QAClB,IAAI,CAACS,OAAO,CAAC,cAAc,CAAC;QAC5B,IAAI,CAACA,OAAO,CAAC,oBAAoB,CAAC;MACpC,CAAC;MACDC,aAAaA,CAAA,EAAG;QACd;QACA,IAAI,CAAC,IAAI,CAACC,OAAO,CAAC,cAAc,CAAC,EAAE;UACjC,IAAI,CAACF,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAClC,IAAI,CAACA,OAAO,CAAC,oBAAoB,EAAE,IAAI,CAAC;UACxC,IAAI,CAACP,MAAM,CAAC,CAAC;QACf;MACF,CAAC;MACDD,iBAAiBA,CAAA,EAAG;QAClB,IAAI,CAACK,MAAM,CAAC,CAAC;MACf,CAAC;MACDM,aAAaA,CAACC,KAAK,EAAE;QACnB,IAAI,CAACC,GAAG,CAAC,IAAI,CAACC,cAAc,CAACF,KAAK,CAAC,CAAC;MACtC,CAAC;MACDV,QAAQA,CAAA,EAAG;QACT,MAAME,KAAK,GAAG,IAAI,CAACC,MAAM,CAAC,CAAC;QAC3B,IAAI,CAACN,GAAG,CAACO,IAAI,CAACF,KAAK,EAAE,KAAK,CAAC,CAAC;QAC5B,IAAI,CAACL,GAAG,CAAC,SAAS,CAAC;MACrB,CAAC;MACDgB,YAAYA,CAACH,KAAK,EAAE;QAClB,IAAI,CAACC,GAAG,CAAC,IAAI,CAACC,cAAc,CAACF,KAAK,CAAC,CAAC;MACtC;IACF;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASN,IAAIA,CAACF,KAAK,EAAEY,WAAW,EAAE;IAChC,OAAOvB,cAAc,CAACW,KAAK,EAAE;MAC3B,GAAGT,OAAO;MACVqB;IACF,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}