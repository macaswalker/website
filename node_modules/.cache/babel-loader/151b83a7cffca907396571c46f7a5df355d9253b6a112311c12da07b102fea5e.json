{"ast":null,"code":"// src/data/blog/simple-interactive-post.js\nconst post = {\n  id: \"simple-interactive-post\",\n  title: \"Exploring Interactive Features in Blog Posts\",\n  publication: \"Personal Blog, 2025\",\n  date: \"2025-04-29\",\n  summary: \"A demonstration of code snippets and interactive elements that can be used in blog posts.\",\n  content: `\n  # Exploring Interactive Features in Blog Posts\n  \n  ## Introduction\n  \n  This blog post demonstrates how to add interactive features to your writing, making your content more engaging and educational.\n  \n  ## Code Snippets with Syntax Highlighting\n  \n  Here's a simple JavaScript function that calculates the Fibonacci sequence:\n  \n  \\`\\`\\`javascript\n  function fibonacci(n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n  \n  // Calculate the first 10 Fibonacci numbers\n  const fibSequence = Array.from({ length: 10 }, (_, i) => fibonacci(i));\n  console.log(fibSequence);\n  // Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  \\`\\`\\`\n  \n  ## Live Code Editor\n  \n  You can edit and run this code directly in the browser:\n  \n  <LiveCode initialCode={\n  \\`// Modify this code and run it!\n  function greet(name) {\n    return \\`Hello, \\${name}!\\`;\n  }\n  \n  const message = greet('World');\n  console.log(message);\n  \n  // Try changing 'World' to your name\n  \\`}/>\n  \n  ## Simple Counter Demo\n  \n  This is a basic interactive counter that demonstrates React state:\n  \n  <InteractiveDemo>\n  {() => {\n    const [count, setCount] = React.useState(0);\n    \n    return (\n      <div className=\"p-6 text-center\">\n        <h3 className=\"text-xl font-semibold mb-4\">Interactive Counter</h3>\n        <p className=\"text-4xl mb-6\">{count}</p>\n        <div className=\"flex justify-center space-x-4\">\n          <button \n            onClick={() => setCount(count - 1)}\n            className=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\"\n          >\n            Decrease\n          </button>\n          <button \n            onClick={() => setCount(0)}\n            className=\"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600\"\n          >\n            Reset\n          </button>\n          <button \n            onClick={() => setCount(count + 1)}\n            className=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600\"\n          >\n            Increase\n          </button>\n        </div>\n      </div>\n    );\n  }}\n  </InteractiveDemo>\n  \n  ## Color Picker Demo\n  \n  Here's another example that shows a simple color picker:\n  \n  <InteractiveDemo>\n  {() => {\n    const [color, setColor] = React.useState('#3b82f6');\n    \n    return (\n      <div className=\"p-6\">\n        <h3 className=\"text-xl font-semibold mb-4\">Color Picker</h3>\n        <div \n          className=\"w-full h-32 mb-4 rounded-md border border-gray-300\"\n          style={{ backgroundColor: color }}\n        ></div>\n        <div className=\"flex items-center space-x-4\">\n          <input\n            type=\"color\"\n            value={color}\n            onChange={(e) => setColor(e.target.value)}\n            className=\"h-10 w-10\"\n          />\n          <span className=\"font-mono\">{color}</span>\n        </div>\n      </div>\n    );\n  }}\n  </InteractiveDemo>\n  \n  ## Conclusion\n  \n  Interactive elements make your blog posts more engaging and help readers understand concepts more deeply through hands-on experimentation.\n  \n  Try creating your own interactive blog posts using these techniques!\n    `\n};\nexport default post;","map":{"version":3,"names":["post","id","title","publication","date","summary","content"],"sources":["/Users/mac/Documents/Career/Website/src/data/blog/simple-interactive-post.js"],"sourcesContent":["// src/data/blog/simple-interactive-post.js\nconst post = {\n    id: \"simple-interactive-post\",\n    title: \"Exploring Interactive Features in Blog Posts\",\n    publication: \"Personal Blog, 2025\",\n    date: \"2025-04-29\",\n    summary: \"A demonstration of code snippets and interactive elements that can be used in blog posts.\",\n    content: `\n  # Exploring Interactive Features in Blog Posts\n  \n  ## Introduction\n  \n  This blog post demonstrates how to add interactive features to your writing, making your content more engaging and educational.\n  \n  ## Code Snippets with Syntax Highlighting\n  \n  Here's a simple JavaScript function that calculates the Fibonacci sequence:\n  \n  \\`\\`\\`javascript\n  function fibonacci(n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n  \n  // Calculate the first 10 Fibonacci numbers\n  const fibSequence = Array.from({ length: 10 }, (_, i) => fibonacci(i));\n  console.log(fibSequence);\n  // Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  \\`\\`\\`\n  \n  ## Live Code Editor\n  \n  You can edit and run this code directly in the browser:\n  \n  <LiveCode initialCode={\n  \\`// Modify this code and run it!\n  function greet(name) {\n    return \\`Hello, \\${name}!\\`;\n  }\n  \n  const message = greet('World');\n  console.log(message);\n  \n  // Try changing 'World' to your name\n  \\`}/>\n  \n  ## Simple Counter Demo\n  \n  This is a basic interactive counter that demonstrates React state:\n  \n  <InteractiveDemo>\n  {() => {\n    const [count, setCount] = React.useState(0);\n    \n    return (\n      <div className=\"p-6 text-center\">\n        <h3 className=\"text-xl font-semibold mb-4\">Interactive Counter</h3>\n        <p className=\"text-4xl mb-6\">{count}</p>\n        <div className=\"flex justify-center space-x-4\">\n          <button \n            onClick={() => setCount(count - 1)}\n            className=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\"\n          >\n            Decrease\n          </button>\n          <button \n            onClick={() => setCount(0)}\n            className=\"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600\"\n          >\n            Reset\n          </button>\n          <button \n            onClick={() => setCount(count + 1)}\n            className=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600\"\n          >\n            Increase\n          </button>\n        </div>\n      </div>\n    );\n  }}\n  </InteractiveDemo>\n  \n  ## Color Picker Demo\n  \n  Here's another example that shows a simple color picker:\n  \n  <InteractiveDemo>\n  {() => {\n    const [color, setColor] = React.useState('#3b82f6');\n    \n    return (\n      <div className=\"p-6\">\n        <h3 className=\"text-xl font-semibold mb-4\">Color Picker</h3>\n        <div \n          className=\"w-full h-32 mb-4 rounded-md border border-gray-300\"\n          style={{ backgroundColor: color }}\n        ></div>\n        <div className=\"flex items-center space-x-4\">\n          <input\n            type=\"color\"\n            value={color}\n            onChange={(e) => setColor(e.target.value)}\n            className=\"h-10 w-10\"\n          />\n          <span className=\"font-mono\">{color}</span>\n        </div>\n      </div>\n    );\n  }}\n  </InteractiveDemo>\n  \n  ## Conclusion\n  \n  Interactive elements make your blog posts more engaging and help readers understand concepts more deeply through hands-on experimentation.\n  \n  Try creating your own interactive blog posts using these techniques!\n    `\n  };\n  \n  export default post;"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAG;EACTC,EAAE,EAAE,yBAAyB;EAC7BC,KAAK,EAAE,8CAA8C;EACrDC,WAAW,EAAE,qBAAqB;EAClCC,IAAI,EAAE,YAAY;EAClBC,OAAO,EAAE,2FAA2F;EACpGC,OAAO,EAAE;AACbeAAeN,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}