{"ast":null,"code":"/**\n * @import {ElementContent, Root} from 'hast'\n * @import {KatexOptions} from 'katex'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<KatexOptions, 'displayMode' | 'throwOnError'>} Options\n */\n\nimport { fromHtmlIsomorphic } from 'hast-util-from-html-isomorphic';\nimport { toText } from 'hast-util-to-text';\nimport katex from 'katex';\nimport { SKIP, visitParents } from 'unist-util-visit-parents';\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {};\n/** @type {ReadonlyArray<unknown>} */\nconst emptyClasses = [];\n\n/**\n * Render elements with a `language-math` (or `math-display`, `math-inline`)\n * class with KaTeX.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeKatex(options) {\n  const settings = options || emptyOptions;\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    visitParents(tree, 'element', function (element, parents) {\n      const classes = Array.isArray(element.properties.className) ? element.properties.className : emptyClasses;\n      // This class can be generated from markdown with ` ```math `.\n      const languageMath = classes.includes('language-math');\n      // This class is used by `remark-math` for flow math (block, `$$\\nmath\\n$$`).\n      const mathDisplay = classes.includes('math-display');\n      // This class is used by `remark-math` for text math (inline, `$math$`).\n      const mathInline = classes.includes('math-inline');\n      let displayMode = mathDisplay;\n\n      // Any class is fine.\n      if (!languageMath && !mathDisplay && !mathInline) {\n        return;\n      }\n      let parent = parents[parents.length - 1];\n      let scope = element;\n\n      // If this was generated with ` ```math `, replace the `<pre>` and use\n      // display.\n      if (element.tagName === 'code' && languageMath && parent && parent.type === 'element' && parent.tagName === 'pre') {\n        scope = parent;\n        parent = parents[parents.length - 2];\n        displayMode = true;\n      }\n\n      /* c8 ignore next -- verbose to test. */\n      if (!parent) return;\n      const value = toText(scope, {\n        whitespace: 'pre'\n      });\n\n      /** @type {Array<ElementContent> | string | undefined} */\n      let result;\n      try {\n        result = katex.renderToString(value, {\n          ...settings,\n          displayMode,\n          throwOnError: true\n        });\n      } catch (error) {\n        const cause = /** @type {Error} */error;\n        const ruleId = cause.name.toLowerCase();\n        file.message('Could not render math with KaTeX', {\n          ancestors: [...parents, element],\n          cause,\n          place: element.position,\n          ruleId,\n          source: 'rehype-katex'\n        });\n\n        // KaTeX *should* handle `ParseError` itself, but not others.\n        // it doesn’t always:\n        // <https://github.com/remarkjs/react-markdown/issues/853>\n        try {\n          result = katex.renderToString(value, {\n            ...settings,\n            displayMode,\n            strict: 'ignore',\n            throwOnError: false\n          });\n        } catch {\n          // Generate similar markup if this is an other error.\n          // See: <https://github.com/KaTeX/KaTeX/blob/5dc7af0/docs/error.md>.\n          result = [{\n            type: 'element',\n            tagName: 'span',\n            properties: {\n              className: ['katex-error'],\n              style: 'color:' + (settings.errorColor || '#cc0000'),\n              title: String(error)\n            },\n            children: [{\n              type: 'text',\n              value\n            }]\n          }];\n        }\n      }\n      if (typeof result === 'string') {\n        const root = fromHtmlIsomorphic(result, {\n          fragment: true\n        });\n        // Cast as we don’t expect `doctypes` in KaTeX result.\n        result = /** @type {Array<ElementContent>} */root.children;\n      }\n      const index = parent.children.indexOf(scope);\n      parent.children.splice(index, 1, ...result);\n      return SKIP;\n    });\n  };\n}","map":{"version":3,"names":["fromHtmlIsomorphic","toText","katex","SKIP","visitParents","emptyOptions","emptyClasses","rehypeKatex","options","settings","tree","file","element","parents","classes","Array","isArray","properties","className","languageMath","includes","mathDisplay","mathInline","displayMode","parent","length","scope","tagName","type","value","whitespace","result","renderToString","throwOnError","error","cause","ruleId","name","toLowerCase","message","ancestors","place","position","source","strict","style","errorColor","title","String","children","root","fragment","index","indexOf","splice"],"sources":["/Users/mac/Documents/Career/Website/node_modules/rehype-katex/lib/index.js"],"sourcesContent":["/**\n * @import {ElementContent, Root} from 'hast'\n * @import {KatexOptions} from 'katex'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<KatexOptions, 'displayMode' | 'throwOnError'>} Options\n */\n\nimport {fromHtmlIsomorphic} from 'hast-util-from-html-isomorphic'\nimport {toText} from 'hast-util-to-text'\nimport katex from 'katex'\nimport {SKIP, visitParents} from 'unist-util-visit-parents'\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n/** @type {ReadonlyArray<unknown>} */\nconst emptyClasses = []\n\n/**\n * Render elements with a `language-math` (or `math-display`, `math-inline`)\n * class with KaTeX.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeKatex(options) {\n  const settings = options || emptyOptions\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    visitParents(tree, 'element', function (element, parents) {\n      const classes = Array.isArray(element.properties.className)\n        ? element.properties.className\n        : emptyClasses\n      // This class can be generated from markdown with ` ```math `.\n      const languageMath = classes.includes('language-math')\n      // This class is used by `remark-math` for flow math (block, `$$\\nmath\\n$$`).\n      const mathDisplay = classes.includes('math-display')\n      // This class is used by `remark-math` for text math (inline, `$math$`).\n      const mathInline = classes.includes('math-inline')\n      let displayMode = mathDisplay\n\n      // Any class is fine.\n      if (!languageMath && !mathDisplay && !mathInline) {\n        return\n      }\n\n      let parent = parents[parents.length - 1]\n      let scope = element\n\n      // If this was generated with ` ```math `, replace the `<pre>` and use\n      // display.\n      if (\n        element.tagName === 'code' &&\n        languageMath &&\n        parent &&\n        parent.type === 'element' &&\n        parent.tagName === 'pre'\n      ) {\n        scope = parent\n        parent = parents[parents.length - 2]\n        displayMode = true\n      }\n\n      /* c8 ignore next -- verbose to test. */\n      if (!parent) return\n\n      const value = toText(scope, {whitespace: 'pre'})\n\n      /** @type {Array<ElementContent> | string | undefined} */\n      let result\n\n      try {\n        result = katex.renderToString(value, {\n          ...settings,\n          displayMode,\n          throwOnError: true\n        })\n      } catch (error) {\n        const cause = /** @type {Error} */ (error)\n        const ruleId = cause.name.toLowerCase()\n\n        file.message('Could not render math with KaTeX', {\n          ancestors: [...parents, element],\n          cause,\n          place: element.position,\n          ruleId,\n          source: 'rehype-katex'\n        })\n\n        // KaTeX *should* handle `ParseError` itself, but not others.\n        // it doesn’t always:\n        // <https://github.com/remarkjs/react-markdown/issues/853>\n        try {\n          result = katex.renderToString(value, {\n            ...settings,\n            displayMode,\n            strict: 'ignore',\n            throwOnError: false\n          })\n        } catch {\n          // Generate similar markup if this is an other error.\n          // See: <https://github.com/KaTeX/KaTeX/blob/5dc7af0/docs/error.md>.\n          result = [\n            {\n              type: 'element',\n              tagName: 'span',\n              properties: {\n                className: ['katex-error'],\n                style: 'color:' + (settings.errorColor || '#cc0000'),\n                title: String(error)\n              },\n              children: [{type: 'text', value}]\n            }\n          ]\n        }\n      }\n\n      if (typeof result === 'string') {\n        const root = fromHtmlIsomorphic(result, {fragment: true})\n        // Cast as we don’t expect `doctypes` in KaTeX result.\n        result = /** @type {Array<ElementContent>} */ (root.children)\n      }\n\n      const index = parent.children.indexOf(scope)\n      parent.children.splice(index, 1, ...result)\n      return SKIP\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}