{"ast":null,"code":"/// <reference types=\"mdast-util-math\" />\n/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-math').ToOptions} Options\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\nimport { mathFromMarkdown, mathToMarkdown } from 'mdast-util-math';\nimport { math } from 'micromark-extension-math';\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {};\n\n/**\n * Add support for math.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkMath(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */this;\n  const settings = options || emptyOptions;\n  const data = self.data();\n  const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);\n  const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);\n  const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);\n  micromarkExtensions.push(math(settings));\n  fromMarkdownExtensions.push(mathFromMarkdown());\n  toMarkdownExtensions.push(mathToMarkdown(settings));\n}","map":{"version":3,"names":["mathFromMarkdown","mathToMarkdown","math","emptyOptions","remarkMath","options","self","settings","data","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","push"],"sources":["/Users/mac/Documents/Career/Website/node_modules/remark-math/lib/index.js"],"sourcesContent":["/// <reference types=\"mdast-util-math\" />\n/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-math').ToOptions} Options\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\nimport {mathFromMarkdown, mathToMarkdown} from 'mdast-util-math'\nimport {math} from 'micromark-extension-math'\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n\n/**\n * Add support for math.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkMath(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(math(settings))\n  fromMarkdownExtensions.push(mathFromMarkdown())\n  toMarkdownExtensions.push(mathToMarkdown(settings))\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,gBAAgB,EAAEC,cAAc,QAAO,iBAAiB;AAChE,SAAQC,IAAI,QAAO,0BAA0B;;AAE7C;AACA,MAAMC,YAAY,GAAG,CAAC,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,UAAUA,CAACC,OAAO,EAAE;EAC1C;EACA;EACA,MAAMC,IAAI,GAAG,wBAA0B,IAAK;EAC5C,MAAMC,QAAQ,GAAGF,OAAO,IAAIF,YAAY;EACxC,MAAMK,IAAI,GAAGF,IAAI,CAACE,IAAI,CAAC,CAAC;EAExB,MAAMC,mBAAmB,GACvBD,IAAI,CAACC,mBAAmB,KAAKD,IAAI,CAACC,mBAAmB,GAAG,EAAE,CAAC;EAC7D,MAAMC,sBAAsB,GAC1BF,IAAI,CAACE,sBAAsB,KAAKF,IAAI,CAACE,sBAAsB,GAAG,EAAE,CAAC;EACnE,MAAMC,oBAAoB,GACxBH,IAAI,CAACG,oBAAoB,KAAKH,IAAI,CAACG,oBAAoB,GAAG,EAAE,CAAC;EAE/DF,mBAAmB,CAACG,IAAI,CAACV,IAAI,CAACK,QAAQ,CAAC,CAAC;EACxCG,sBAAsB,CAACE,IAAI,CAACZ,gBAAgB,CAAC,CAAC,CAAC;EAC/CW,oBAAoB,CAACC,IAAI,CAACX,cAAc,CAACM,QAAQ,CAAC,CAAC;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}