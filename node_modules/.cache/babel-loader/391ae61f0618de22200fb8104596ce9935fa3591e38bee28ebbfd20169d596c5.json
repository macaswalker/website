{"ast":null,"code":"import { Tokenizer, TokenizerMode } from '../tokenizer/index.js';\nimport { OpenElementStack } from './open-element-stack.js';\nimport { FormattingElementList, EntryType } from './formatting-element-list.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\nimport * as doctype from '../common/doctype.js';\nimport * as foreignContent from '../common/foreign-content.js';\nimport { ERR } from '../common/error-codes.js';\nimport * as unicode from '../common/unicode.js';\nimport { TAG_ID as $, TAG_NAMES as TN, NS, ATTRS, SPECIAL_ELEMENTS, DOCUMENT_MODE, NUMBERED_HEADERS, getTagID } from '../common/html.js';\nimport { TokenType, getTokenAttr } from '../common/token.js';\n//Misc constants\nconst HIDDEN_INPUT_TYPE = 'hidden';\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n//Insertion modes\nvar InsertionMode;\n(function (InsertionMode) {\n  InsertionMode[InsertionMode[\"INITIAL\"] = 0] = \"INITIAL\";\n  InsertionMode[InsertionMode[\"BEFORE_HTML\"] = 1] = \"BEFORE_HTML\";\n  InsertionMode[InsertionMode[\"BEFORE_HEAD\"] = 2] = \"BEFORE_HEAD\";\n  InsertionMode[InsertionMode[\"IN_HEAD\"] = 3] = \"IN_HEAD\";\n  InsertionMode[InsertionMode[\"IN_HEAD_NO_SCRIPT\"] = 4] = \"IN_HEAD_NO_SCRIPT\";\n  InsertionMode[InsertionMode[\"AFTER_HEAD\"] = 5] = \"AFTER_HEAD\";\n  InsertionMode[InsertionMode[\"IN_BODY\"] = 6] = \"IN_BODY\";\n  InsertionMode[InsertionMode[\"TEXT\"] = 7] = \"TEXT\";\n  InsertionMode[InsertionMode[\"IN_TABLE\"] = 8] = \"IN_TABLE\";\n  InsertionMode[InsertionMode[\"IN_TABLE_TEXT\"] = 9] = \"IN_TABLE_TEXT\";\n  InsertionMode[InsertionMode[\"IN_CAPTION\"] = 10] = \"IN_CAPTION\";\n  InsertionMode[InsertionMode[\"IN_COLUMN_GROUP\"] = 11] = \"IN_COLUMN_GROUP\";\n  InsertionMode[InsertionMode[\"IN_TABLE_BODY\"] = 12] = \"IN_TABLE_BODY\";\n  InsertionMode[InsertionMode[\"IN_ROW\"] = 13] = \"IN_ROW\";\n  InsertionMode[InsertionMode[\"IN_CELL\"] = 14] = \"IN_CELL\";\n  InsertionMode[InsertionMode[\"IN_SELECT\"] = 15] = \"IN_SELECT\";\n  InsertionMode[InsertionMode[\"IN_SELECT_IN_TABLE\"] = 16] = \"IN_SELECT_IN_TABLE\";\n  InsertionMode[InsertionMode[\"IN_TEMPLATE\"] = 17] = \"IN_TEMPLATE\";\n  InsertionMode[InsertionMode[\"AFTER_BODY\"] = 18] = \"AFTER_BODY\";\n  InsertionMode[InsertionMode[\"IN_FRAMESET\"] = 19] = \"IN_FRAMESET\";\n  InsertionMode[InsertionMode[\"AFTER_FRAMESET\"] = 20] = \"AFTER_FRAMESET\";\n  InsertionMode[InsertionMode[\"AFTER_AFTER_BODY\"] = 21] = \"AFTER_AFTER_BODY\";\n  InsertionMode[InsertionMode[\"AFTER_AFTER_FRAMESET\"] = 22] = \"AFTER_AFTER_FRAMESET\";\n})(InsertionMode || (InsertionMode = {}));\nconst BASE_LOC = {\n  startLine: -1,\n  startCol: -1,\n  startOffset: -1,\n  endLine: -1,\n  endCol: -1,\n  endOffset: -1\n};\nconst TABLE_STRUCTURE_TAGS = new Set([$.TABLE, $.TBODY, $.TFOOT, $.THEAD, $.TR]);\nconst defaultParserOptions = {\n  scriptingEnabled: true,\n  sourceCodeLocationInfo: false,\n  treeAdapter: defaultTreeAdapter,\n  onParseError: null\n};\n//Parser\nexport class Parser {\n  constructor(options, document) {\n    let fragmentContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let scriptHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    this.fragmentContext = fragmentContext;\n    this.scriptHandler = scriptHandler;\n    this.currentToken = null;\n    this.stopped = false;\n    /** @internal */\n    this.insertionMode = InsertionMode.INITIAL;\n    /** @internal */\n    this.originalInsertionMode = InsertionMode.INITIAL;\n    /** @internal */\n    this.headElement = null;\n    /** @internal */\n    this.formElement = null;\n    /** Indicates that the current node is not an element in the HTML namespace */\n    this.currentNotInHTML = false;\n    /**\n     * The template insertion mode stack is maintained from the left.\n     * Ie. the topmost element will always have index 0.\n     *\n     * @internal\n     */\n    this.tmplInsertionModeStack = [];\n    /** @internal */\n    this.pendingCharacterTokens = [];\n    /** @internal */\n    this.hasNonWhitespacePendingCharacterToken = false;\n    /** @internal */\n    this.framesetOk = true;\n    /** @internal */\n    this.skipNextNewLine = false;\n    /** @internal */\n    this.fosterParentingEnabled = false;\n    this.options = {\n      ...defaultParserOptions,\n      ...options\n    };\n    this.treeAdapter = this.options.treeAdapter;\n    this.onParseError = this.options.onParseError;\n    // Always enable location info if we report parse errors.\n    if (this.onParseError) {\n      this.options.sourceCodeLocationInfo = true;\n    }\n    this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();\n    this.tokenizer = new Tokenizer(this.options, this);\n    this.activeFormattingElements = new FormattingElementList(this.treeAdapter);\n    this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : $.UNKNOWN;\n    this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);\n    this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);\n  }\n  // API\n  static parse(html, options) {\n    const parser = new this(options);\n    parser.tokenizer.write(html, true);\n    return parser.document;\n  }\n  static getFragmentParser(fragmentContext, options) {\n    const opts = {\n      ...defaultParserOptions,\n      ...options\n    };\n    //NOTE: use a <template> element as the fragment context if no context element was provided,\n    //so we will parse in a \"forgiving\" manner\n    fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : fragmentContext = opts.treeAdapter.createElement(TN.TEMPLATE, NS.HTML, []);\n    //NOTE: create a fake element which will be used as the `document` for fragment parsing.\n    //This is important for jsdom, where a new `document` cannot be created. This led to\n    //fragment parsing messing with the main `document`.\n    const documentMock = opts.treeAdapter.createElement('documentmock', NS.HTML, []);\n    const parser = new this(opts, documentMock, fragmentContext);\n    if (parser.fragmentContextID === $.TEMPLATE) {\n      parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n    }\n    parser._initTokenizerForFragmentParsing();\n    parser._insertFakeRootElement();\n    parser._resetInsertionMode();\n    parser._findFormInFragmentContext();\n    return parser;\n  }\n  getFragment() {\n    const rootElement = this.treeAdapter.getFirstChild(this.document);\n    const fragment = this.treeAdapter.createDocumentFragment();\n    this._adoptNodes(rootElement, fragment);\n    return fragment;\n  }\n  //Errors\n  /** @internal */\n  _err(token, code, beforeToken) {\n    var _a;\n    if (!this.onParseError) return;\n    const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;\n    const err = {\n      code,\n      startLine: loc.startLine,\n      startCol: loc.startCol,\n      startOffset: loc.startOffset,\n      endLine: beforeToken ? loc.startLine : loc.endLine,\n      endCol: beforeToken ? loc.startCol : loc.endCol,\n      endOffset: beforeToken ? loc.startOffset : loc.endOffset\n    };\n    this.onParseError(err);\n  }\n  //Stack events\n  /** @internal */\n  onItemPush(node, tid, isTop) {\n    var _a, _b;\n    (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n    if (isTop && this.openElements.stackTop > 0) this._setContextModes(node, tid);\n  }\n  /** @internal */\n  onItemPop(node, isTop) {\n    var _a, _b;\n    if (this.options.sourceCodeLocationInfo) {\n      this._setEndLocation(node, this.currentToken);\n    }\n    (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);\n    if (isTop) {\n      let current;\n      let currentTagId;\n      if (this.openElements.stackTop === 0 && this.fragmentContext) {\n        current = this.fragmentContext;\n        currentTagId = this.fragmentContextID;\n      } else {\n        ({\n          current,\n          currentTagId\n        } = this.openElements);\n      }\n      this._setContextModes(current, currentTagId);\n    }\n  }\n  _setContextModes(current, tid) {\n    const isHTML = current === this.document || current && this.treeAdapter.getNamespaceURI(current) === NS.HTML;\n    this.currentNotInHTML = !isHTML;\n    this.tokenizer.inForeignNode = !isHTML && current !== undefined && tid !== undefined && !this._isIntegrationPoint(tid, current);\n  }\n  /** @protected */\n  _switchToTextParsing(currentToken, nextTokenizerState) {\n    this._insertElement(currentToken, NS.HTML);\n    this.tokenizer.state = nextTokenizerState;\n    this.originalInsertionMode = this.insertionMode;\n    this.insertionMode = InsertionMode.TEXT;\n  }\n  switchToPlaintextParsing() {\n    this.insertionMode = InsertionMode.TEXT;\n    this.originalInsertionMode = InsertionMode.IN_BODY;\n    this.tokenizer.state = TokenizerMode.PLAINTEXT;\n  }\n  //Fragment parsing\n  /** @protected */\n  _getAdjustedCurrentElement() {\n    return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;\n  }\n  /** @protected */\n  _findFormInFragmentContext() {\n    let node = this.fragmentContext;\n    while (node) {\n      if (this.treeAdapter.getTagName(node) === TN.FORM) {\n        this.formElement = node;\n        break;\n      }\n      node = this.treeAdapter.getParentNode(node);\n    }\n  }\n  _initTokenizerForFragmentParsing() {\n    if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {\n      return;\n    }\n    switch (this.fragmentContextID) {\n      case $.TITLE:\n      case $.TEXTAREA:\n        {\n          this.tokenizer.state = TokenizerMode.RCDATA;\n          break;\n        }\n      case $.STYLE:\n      case $.XMP:\n      case $.IFRAME:\n      case $.NOEMBED:\n      case $.NOFRAMES:\n      case $.NOSCRIPT:\n        {\n          this.tokenizer.state = TokenizerMode.RAWTEXT;\n          break;\n        }\n      case $.SCRIPT:\n        {\n          this.tokenizer.state = TokenizerMode.SCRIPT_DATA;\n          break;\n        }\n      case $.PLAINTEXT:\n        {\n          this.tokenizer.state = TokenizerMode.PLAINTEXT;\n          break;\n        }\n      default:\n      // Do nothing\n    }\n  }\n  //Tree mutation\n  /** @protected */\n  _setDocumentType(token) {\n    const name = token.name || '';\n    const publicId = token.publicId || '';\n    const systemId = token.systemId || '';\n    this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n    if (token.location) {\n      const documentChildren = this.treeAdapter.getChildNodes(this.document);\n      const docTypeNode = documentChildren.find(node => this.treeAdapter.isDocumentTypeNode(node));\n      if (docTypeNode) {\n        this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);\n      }\n    }\n  }\n  /** @protected */\n  _attachElementToTree(element, location) {\n    if (this.options.sourceCodeLocationInfo) {\n      const loc = location && {\n        ...location,\n        startTag: location\n      };\n      this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n    }\n    if (this._shouldFosterParentOnInsertion()) {\n      this._fosterParentElement(element);\n    } else {\n      const parent = this.openElements.currentTmplContentOrNode;\n      this.treeAdapter.appendChild(parent !== null && parent !== void 0 ? parent : this.document, element);\n    }\n  }\n  /**\n   * For self-closing tags. Add an element to the tree, but skip adding it\n   * to the stack.\n   */\n  /** @protected */\n  _appendElement(token, namespaceURI) {\n    const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n    this._attachElementToTree(element, token.location);\n  }\n  /** @protected */\n  _insertElement(token, namespaceURI) {\n    const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n    this._attachElementToTree(element, token.location);\n    this.openElements.push(element, token.tagID);\n  }\n  /** @protected */\n  _insertFakeElement(tagName, tagID) {\n    const element = this.treeAdapter.createElement(tagName, NS.HTML, []);\n    this._attachElementToTree(element, null);\n    this.openElements.push(element, tagID);\n  }\n  /** @protected */\n  _insertTemplate(token) {\n    const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);\n    const content = this.treeAdapter.createDocumentFragment();\n    this.treeAdapter.setTemplateContent(tmpl, content);\n    this._attachElementToTree(tmpl, token.location);\n    this.openElements.push(tmpl, token.tagID);\n    if (this.options.sourceCodeLocationInfo) this.treeAdapter.setNodeSourceCodeLocation(content, null);\n  }\n  /** @protected */\n  _insertFakeRootElement() {\n    const element = this.treeAdapter.createElement(TN.HTML, NS.HTML, []);\n    if (this.options.sourceCodeLocationInfo) this.treeAdapter.setNodeSourceCodeLocation(element, null);\n    this.treeAdapter.appendChild(this.openElements.current, element);\n    this.openElements.push(element, $.HTML);\n  }\n  /** @protected */\n  _appendCommentNode(token, parent) {\n    const commentNode = this.treeAdapter.createCommentNode(token.data);\n    this.treeAdapter.appendChild(parent, commentNode);\n    if (this.options.sourceCodeLocationInfo) {\n      this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n    }\n  }\n  /** @protected */\n  _insertCharacters(token) {\n    let parent;\n    let beforeElement;\n    if (this._shouldFosterParentOnInsertion()) {\n      ({\n        parent,\n        beforeElement\n      } = this._findFosterParentingLocation());\n      if (beforeElement) {\n        this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);\n      } else {\n        this.treeAdapter.insertText(parent, token.chars);\n      }\n    } else {\n      parent = this.openElements.currentTmplContentOrNode;\n      this.treeAdapter.insertText(parent, token.chars);\n    }\n    if (!token.location) return;\n    const siblings = this.treeAdapter.getChildNodes(parent);\n    const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;\n    const textNode = siblings[textNodeIdx - 1];\n    //NOTE: if we have a location assigned by another token, then just update the end position\n    const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n    if (tnLoc) {\n      const {\n        endLine,\n        endCol,\n        endOffset\n      } = token.location;\n      this.treeAdapter.updateNodeSourceCodeLocation(textNode, {\n        endLine,\n        endCol,\n        endOffset\n      });\n    } else if (this.options.sourceCodeLocationInfo) {\n      this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n    }\n  }\n  /** @protected */\n  _adoptNodes(donor, recipient) {\n    for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {\n      this.treeAdapter.detachNode(child);\n      this.treeAdapter.appendChild(recipient, child);\n    }\n  }\n  /** @protected */\n  _setEndLocation(element, closingToken) {\n    if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {\n      const ctLoc = closingToken.location;\n      const tn = this.treeAdapter.getTagName(element);\n      const endLoc =\n      // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n      // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n      closingToken.type === TokenType.END_TAG && tn === closingToken.tagName ? {\n        endTag: {\n          ...ctLoc\n        },\n        endLine: ctLoc.endLine,\n        endCol: ctLoc.endCol,\n        endOffset: ctLoc.endOffset\n      } : {\n        endLine: ctLoc.startLine,\n        endCol: ctLoc.startCol,\n        endOffset: ctLoc.startOffset\n      };\n      this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n    }\n  }\n  //Token processing\n  shouldProcessStartTagTokenInForeignContent(token) {\n    // Check that neither current === document, or ns === NS.HTML\n    if (!this.currentNotInHTML) return false;\n    let current;\n    let currentTagId;\n    if (this.openElements.stackTop === 0 && this.fragmentContext) {\n      current = this.fragmentContext;\n      currentTagId = this.fragmentContextID;\n    } else {\n      ({\n        current,\n        currentTagId\n      } = this.openElements);\n    }\n    if (token.tagID === $.SVG && this.treeAdapter.getTagName(current) === TN.ANNOTATION_XML && this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {\n      return false;\n    }\n    return (\n      // Check that `current` is not an integration point for HTML or MathML elements.\n      this.tokenizer.inForeignNode ||\n      // If it _is_ an integration point, then we might have to check that it is not an HTML\n      // integration point.\n      (token.tagID === $.MGLYPH || token.tagID === $.MALIGNMARK) && currentTagId !== undefined && !this._isIntegrationPoint(currentTagId, current, NS.HTML)\n    );\n  }\n  /** @protected */\n  _processToken(token) {\n    switch (token.type) {\n      case TokenType.CHARACTER:\n        {\n          this.onCharacter(token);\n          break;\n        }\n      case TokenType.NULL_CHARACTER:\n        {\n          this.onNullCharacter(token);\n          break;\n        }\n      case TokenType.COMMENT:\n        {\n          this.onComment(token);\n          break;\n        }\n      case TokenType.DOCTYPE:\n        {\n          this.onDoctype(token);\n          break;\n        }\n      case TokenType.START_TAG:\n        {\n          this._processStartTag(token);\n          break;\n        }\n      case TokenType.END_TAG:\n        {\n          this.onEndTag(token);\n          break;\n        }\n      case TokenType.EOF:\n        {\n          this.onEof(token);\n          break;\n        }\n      case TokenType.WHITESPACE_CHARACTER:\n        {\n          this.onWhitespaceCharacter(token);\n          break;\n        }\n    }\n  }\n  //Integration points\n  /** @protected */\n  _isIntegrationPoint(tid, element, foreignNS) {\n    const ns = this.treeAdapter.getNamespaceURI(element);\n    const attrs = this.treeAdapter.getAttrList(element);\n    return foreignContent.isIntegrationPoint(tid, ns, attrs, foreignNS);\n  }\n  //Active formatting elements reconstruction\n  /** @protected */\n  _reconstructActiveFormattingElements() {\n    const listLength = this.activeFormattingElements.entries.length;\n    if (listLength) {\n      const endIndex = this.activeFormattingElements.entries.findIndex(entry => entry.type === EntryType.Marker || this.openElements.contains(entry.element));\n      const unopenIdx = endIndex === -1 ? listLength - 1 : endIndex - 1;\n      for (let i = unopenIdx; i >= 0; i--) {\n        const entry = this.activeFormattingElements.entries[i];\n        this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n        entry.element = this.openElements.current;\n      }\n    }\n  }\n  //Close elements\n  /** @protected */\n  _closeTableCell() {\n    this.openElements.generateImpliedEndTags();\n    this.openElements.popUntilTableCellPopped();\n    this.activeFormattingElements.clearToLastMarker();\n    this.insertionMode = InsertionMode.IN_ROW;\n  }\n  /** @protected */\n  _closePElement() {\n    this.openElements.generateImpliedEndTagsWithExclusion($.P);\n    this.openElements.popUntilTagNamePopped($.P);\n  }\n  //Insertion modes\n  /** @protected */\n  _resetInsertionMode() {\n    for (let i = this.openElements.stackTop; i >= 0; i--) {\n      //Insertion mode reset map\n      switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {\n        case $.TR:\n          {\n            this.insertionMode = InsertionMode.IN_ROW;\n            return;\n          }\n        case $.TBODY:\n        case $.THEAD:\n        case $.TFOOT:\n          {\n            this.insertionMode = InsertionMode.IN_TABLE_BODY;\n            return;\n          }\n        case $.CAPTION:\n          {\n            this.insertionMode = InsertionMode.IN_CAPTION;\n            return;\n          }\n        case $.COLGROUP:\n          {\n            this.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n            return;\n          }\n        case $.TABLE:\n          {\n            this.insertionMode = InsertionMode.IN_TABLE;\n            return;\n          }\n        case $.BODY:\n          {\n            this.insertionMode = InsertionMode.IN_BODY;\n            return;\n          }\n        case $.FRAMESET:\n          {\n            this.insertionMode = InsertionMode.IN_FRAMESET;\n            return;\n          }\n        case $.SELECT:\n          {\n            this._resetInsertionModeForSelect(i);\n            return;\n          }\n        case $.TEMPLATE:\n          {\n            this.insertionMode = this.tmplInsertionModeStack[0];\n            return;\n          }\n        case $.HTML:\n          {\n            this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;\n            return;\n          }\n        case $.TD:\n        case $.TH:\n          {\n            if (i > 0) {\n              this.insertionMode = InsertionMode.IN_CELL;\n              return;\n            }\n            break;\n          }\n        case $.HEAD:\n          {\n            if (i > 0) {\n              this.insertionMode = InsertionMode.IN_HEAD;\n              return;\n            }\n            break;\n          }\n      }\n    }\n    this.insertionMode = InsertionMode.IN_BODY;\n  }\n  /** @protected */\n  _resetInsertionModeForSelect(selectIdx) {\n    if (selectIdx > 0) {\n      for (let i = selectIdx - 1; i > 0; i--) {\n        const tn = this.openElements.tagIDs[i];\n        if (tn === $.TEMPLATE) {\n          break;\n        } else if (tn === $.TABLE) {\n          this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;\n          return;\n        }\n      }\n    }\n    this.insertionMode = InsertionMode.IN_SELECT;\n  }\n  //Foster parenting\n  /** @protected */\n  _isElementCausesFosterParenting(tn) {\n    return TABLE_STRUCTURE_TAGS.has(tn);\n  }\n  /** @protected */\n  _shouldFosterParentOnInsertion() {\n    return this.fosterParentingEnabled && this.openElements.currentTagId !== undefined && this._isElementCausesFosterParenting(this.openElements.currentTagId);\n  }\n  /** @protected */\n  _findFosterParentingLocation() {\n    for (let i = this.openElements.stackTop; i >= 0; i--) {\n      const openElement = this.openElements.items[i];\n      switch (this.openElements.tagIDs[i]) {\n        case $.TEMPLATE:\n          {\n            if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {\n              return {\n                parent: this.treeAdapter.getTemplateContent(openElement),\n                beforeElement: null\n              };\n            }\n            break;\n          }\n        case $.TABLE:\n          {\n            const parent = this.treeAdapter.getParentNode(openElement);\n            if (parent) {\n              return {\n                parent,\n                beforeElement: openElement\n              };\n            }\n            return {\n              parent: this.openElements.items[i - 1],\n              beforeElement: null\n            };\n          }\n        default:\n        // Do nothing\n      }\n    }\n    return {\n      parent: this.openElements.items[0],\n      beforeElement: null\n    };\n  }\n  /** @protected */\n  _fosterParentElement(element) {\n    const location = this._findFosterParentingLocation();\n    if (location.beforeElement) {\n      this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n    } else {\n      this.treeAdapter.appendChild(location.parent, element);\n    }\n  }\n  //Special elements\n  /** @protected */\n  _isSpecialElement(element, id) {\n    const ns = this.treeAdapter.getNamespaceURI(element);\n    return SPECIAL_ELEMENTS[ns].has(id);\n  }\n  /** @internal */\n  onCharacter(token) {\n    this.skipNextNewLine = false;\n    if (this.tokenizer.inForeignNode) {\n      characterInForeignContent(this, token);\n      return;\n    }\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        {\n          tokenInInitialMode(this, token);\n          break;\n        }\n      case InsertionMode.BEFORE_HTML:\n        {\n          tokenBeforeHtml(this, token);\n          break;\n        }\n      case InsertionMode.BEFORE_HEAD:\n        {\n          tokenBeforeHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_HEAD:\n        {\n          tokenInHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        {\n          tokenInHeadNoScript(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_HEAD:\n        {\n          tokenAfterHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_BODY:\n      case InsertionMode.IN_CAPTION:\n      case InsertionMode.IN_CELL:\n      case InsertionMode.IN_TEMPLATE:\n        {\n          characterInBody(this, token);\n          break;\n        }\n      case InsertionMode.TEXT:\n      case InsertionMode.IN_SELECT:\n      case InsertionMode.IN_SELECT_IN_TABLE:\n        {\n          this._insertCharacters(token);\n          break;\n        }\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n        {\n          characterInTable(this, token);\n          break;\n        }\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          characterInTableText(this, token);\n          break;\n        }\n      case InsertionMode.IN_COLUMN_GROUP:\n        {\n          tokenInColumnGroup(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_BODY:\n        {\n          tokenAfterBody(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_AFTER_BODY:\n        {\n          tokenAfterAfterBody(this, token);\n          break;\n        }\n      default:\n      // Do nothing\n    }\n  }\n  /** @internal */\n  onNullCharacter(token) {\n    this.skipNextNewLine = false;\n    if (this.tokenizer.inForeignNode) {\n      nullCharacterInForeignContent(this, token);\n      return;\n    }\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        {\n          tokenInInitialMode(this, token);\n          break;\n        }\n      case InsertionMode.BEFORE_HTML:\n        {\n          tokenBeforeHtml(this, token);\n          break;\n        }\n      case InsertionMode.BEFORE_HEAD:\n        {\n          tokenBeforeHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_HEAD:\n        {\n          tokenInHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        {\n          tokenInHeadNoScript(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_HEAD:\n        {\n          tokenAfterHead(this, token);\n          break;\n        }\n      case InsertionMode.TEXT:\n        {\n          this._insertCharacters(token);\n          break;\n        }\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n        {\n          characterInTable(this, token);\n          break;\n        }\n      case InsertionMode.IN_COLUMN_GROUP:\n        {\n          tokenInColumnGroup(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_BODY:\n        {\n          tokenAfterBody(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_AFTER_BODY:\n        {\n          tokenAfterAfterBody(this, token);\n          break;\n        }\n      default:\n      // Do nothing\n    }\n  }\n  /** @internal */\n  onComment(token) {\n    this.skipNextNewLine = false;\n    if (this.currentNotInHTML) {\n      appendComment(this, token);\n      return;\n    }\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n      case InsertionMode.BEFORE_HTML:\n      case InsertionMode.BEFORE_HEAD:\n      case InsertionMode.IN_HEAD:\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n      case InsertionMode.AFTER_HEAD:\n      case InsertionMode.IN_BODY:\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_CAPTION:\n      case InsertionMode.IN_COLUMN_GROUP:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n      case InsertionMode.IN_CELL:\n      case InsertionMode.IN_SELECT:\n      case InsertionMode.IN_SELECT_IN_TABLE:\n      case InsertionMode.IN_TEMPLATE:\n      case InsertionMode.IN_FRAMESET:\n      case InsertionMode.AFTER_FRAMESET:\n        {\n          appendComment(this, token);\n          break;\n        }\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          tokenInTableText(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_BODY:\n        {\n          appendCommentToRootHtmlElement(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_AFTER_BODY:\n      case InsertionMode.AFTER_AFTER_FRAMESET:\n        {\n          appendCommentToDocument(this, token);\n          break;\n        }\n      default:\n      // Do nothing\n    }\n  }\n  /** @internal */\n  onDoctype(token) {\n    this.skipNextNewLine = false;\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        {\n          doctypeInInitialMode(this, token);\n          break;\n        }\n      case InsertionMode.BEFORE_HEAD:\n      case InsertionMode.IN_HEAD:\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n      case InsertionMode.AFTER_HEAD:\n        {\n          this._err(token, ERR.misplacedDoctype);\n          break;\n        }\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          tokenInTableText(this, token);\n          break;\n        }\n      default:\n      // Do nothing\n    }\n  }\n  /** @internal */\n  onStartTag(token) {\n    this.skipNextNewLine = false;\n    this.currentToken = token;\n    this._processStartTag(token);\n    if (token.selfClosing && !token.ackSelfClosing) {\n      this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n    }\n  }\n  /**\n   * Processes a given start tag.\n   *\n   * `onStartTag` checks if a self-closing tag was recognized. When a token\n   * is moved inbetween multiple insertion modes, this check for self-closing\n   * could lead to false positives. To avoid this, `_processStartTag` is used\n   * for nested calls.\n   *\n   * @param token The token to process.\n   * @protected\n   */\n  _processStartTag(token) {\n    if (this.shouldProcessStartTagTokenInForeignContent(token)) {\n      startTagInForeignContent(this, token);\n    } else {\n      this._startTagOutsideForeignContent(token);\n    }\n  }\n  /** @protected */\n  _startTagOutsideForeignContent(token) {\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        {\n          tokenInInitialMode(this, token);\n          break;\n        }\n      case InsertionMode.BEFORE_HTML:\n        {\n          startTagBeforeHtml(this, token);\n          break;\n        }\n      case InsertionMode.BEFORE_HEAD:\n        {\n          startTagBeforeHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_HEAD:\n        {\n          startTagInHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        {\n          startTagInHeadNoScript(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_HEAD:\n        {\n          startTagAfterHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_BODY:\n        {\n          startTagInBody(this, token);\n          break;\n        }\n      case InsertionMode.IN_TABLE:\n        {\n          startTagInTable(this, token);\n          break;\n        }\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          tokenInTableText(this, token);\n          break;\n        }\n      case InsertionMode.IN_CAPTION:\n        {\n          startTagInCaption(this, token);\n          break;\n        }\n      case InsertionMode.IN_COLUMN_GROUP:\n        {\n          startTagInColumnGroup(this, token);\n          break;\n        }\n      case InsertionMode.IN_TABLE_BODY:\n        {\n          startTagInTableBody(this, token);\n          break;\n        }\n      case InsertionMode.IN_ROW:\n        {\n          startTagInRow(this, token);\n          break;\n        }\n      case InsertionMode.IN_CELL:\n        {\n          startTagInCell(this, token);\n          break;\n        }\n      case InsertionMode.IN_SELECT:\n        {\n          startTagInSelect(this, token);\n          break;\n        }\n      case InsertionMode.IN_SELECT_IN_TABLE:\n        {\n          startTagInSelectInTable(this, token);\n          break;\n        }\n      case InsertionMode.IN_TEMPLATE:\n        {\n          startTagInTemplate(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_BODY:\n        {\n          startTagAfterBody(this, token);\n          break;\n        }\n      case InsertionMode.IN_FRAMESET:\n        {\n          startTagInFrameset(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_FRAMESET:\n        {\n          startTagAfterFrameset(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_AFTER_BODY:\n        {\n          startTagAfterAfterBody(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_AFTER_FRAMESET:\n        {\n          startTagAfterAfterFrameset(this, token);\n          break;\n        }\n      default:\n      // Do nothing\n    }\n  }\n  /** @internal */\n  onEndTag(token) {\n    this.skipNextNewLine = false;\n    this.currentToken = token;\n    if (this.currentNotInHTML) {\n      endTagInForeignContent(this, token);\n    } else {\n      this._endTagOutsideForeignContent(token);\n    }\n  }\n  /** @protected */\n  _endTagOutsideForeignContent(token) {\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        {\n          tokenInInitialMode(this, token);\n          break;\n        }\n      case InsertionMode.BEFORE_HTML:\n        {\n          endTagBeforeHtml(this, token);\n          break;\n        }\n      case InsertionMode.BEFORE_HEAD:\n        {\n          endTagBeforeHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_HEAD:\n        {\n          endTagInHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        {\n          endTagInHeadNoScript(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_HEAD:\n        {\n          endTagAfterHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_BODY:\n        {\n          endTagInBody(this, token);\n          break;\n        }\n      case InsertionMode.TEXT:\n        {\n          endTagInText(this, token);\n          break;\n        }\n      case InsertionMode.IN_TABLE:\n        {\n          endTagInTable(this, token);\n          break;\n        }\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          tokenInTableText(this, token);\n          break;\n        }\n      case InsertionMode.IN_CAPTION:\n        {\n          endTagInCaption(this, token);\n          break;\n        }\n      case InsertionMode.IN_COLUMN_GROUP:\n        {\n          endTagInColumnGroup(this, token);\n          break;\n        }\n      case InsertionMode.IN_TABLE_BODY:\n        {\n          endTagInTableBody(this, token);\n          break;\n        }\n      case InsertionMode.IN_ROW:\n        {\n          endTagInRow(this, token);\n          break;\n        }\n      case InsertionMode.IN_CELL:\n        {\n          endTagInCell(this, token);\n          break;\n        }\n      case InsertionMode.IN_SELECT:\n        {\n          endTagInSelect(this, token);\n          break;\n        }\n      case InsertionMode.IN_SELECT_IN_TABLE:\n        {\n          endTagInSelectInTable(this, token);\n          break;\n        }\n      case InsertionMode.IN_TEMPLATE:\n        {\n          endTagInTemplate(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_BODY:\n        {\n          endTagAfterBody(this, token);\n          break;\n        }\n      case InsertionMode.IN_FRAMESET:\n        {\n          endTagInFrameset(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_FRAMESET:\n        {\n          endTagAfterFrameset(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_AFTER_BODY:\n        {\n          tokenAfterAfterBody(this, token);\n          break;\n        }\n      default:\n      // Do nothing\n    }\n  }\n  /** @internal */\n  onEof(token) {\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        {\n          tokenInInitialMode(this, token);\n          break;\n        }\n      case InsertionMode.BEFORE_HTML:\n        {\n          tokenBeforeHtml(this, token);\n          break;\n        }\n      case InsertionMode.BEFORE_HEAD:\n        {\n          tokenBeforeHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_HEAD:\n        {\n          tokenInHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        {\n          tokenInHeadNoScript(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_HEAD:\n        {\n          tokenAfterHead(this, token);\n          break;\n        }\n      case InsertionMode.IN_BODY:\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_CAPTION:\n      case InsertionMode.IN_COLUMN_GROUP:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n      case InsertionMode.IN_CELL:\n      case InsertionMode.IN_SELECT:\n      case InsertionMode.IN_SELECT_IN_TABLE:\n        {\n          eofInBody(this, token);\n          break;\n        }\n      case InsertionMode.TEXT:\n        {\n          eofInText(this, token);\n          break;\n        }\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          tokenInTableText(this, token);\n          break;\n        }\n      case InsertionMode.IN_TEMPLATE:\n        {\n          eofInTemplate(this, token);\n          break;\n        }\n      case InsertionMode.AFTER_BODY:\n      case InsertionMode.IN_FRAMESET:\n      case InsertionMode.AFTER_FRAMESET:\n      case InsertionMode.AFTER_AFTER_BODY:\n      case InsertionMode.AFTER_AFTER_FRAMESET:\n        {\n          stopParsing(this, token);\n          break;\n        }\n      default:\n      // Do nothing\n    }\n  }\n  /** @internal */\n  onWhitespaceCharacter(token) {\n    if (this.skipNextNewLine) {\n      this.skipNextNewLine = false;\n      if (token.chars.charCodeAt(0) === unicode.CODE_POINTS.LINE_FEED) {\n        if (token.chars.length === 1) {\n          return;\n        }\n        token.chars = token.chars.substr(1);\n      }\n    }\n    if (this.tokenizer.inForeignNode) {\n      this._insertCharacters(token);\n      return;\n    }\n    switch (this.insertionMode) {\n      case InsertionMode.IN_HEAD:\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n      case InsertionMode.AFTER_HEAD:\n      case InsertionMode.TEXT:\n      case InsertionMode.IN_COLUMN_GROUP:\n      case InsertionMode.IN_SELECT:\n      case InsertionMode.IN_SELECT_IN_TABLE:\n      case InsertionMode.IN_FRAMESET:\n      case InsertionMode.AFTER_FRAMESET:\n        {\n          this._insertCharacters(token);\n          break;\n        }\n      case InsertionMode.IN_BODY:\n      case InsertionMode.IN_CAPTION:\n      case InsertionMode.IN_CELL:\n      case InsertionMode.IN_TEMPLATE:\n      case InsertionMode.AFTER_BODY:\n      case InsertionMode.AFTER_AFTER_BODY:\n      case InsertionMode.AFTER_AFTER_FRAMESET:\n        {\n          whitespaceCharacterInBody(this, token);\n          break;\n        }\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n        {\n          characterInTable(this, token);\n          break;\n        }\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          whitespaceCharacterInTableText(this, token);\n          break;\n        }\n      default:\n      // Do nothing\n    }\n  }\n}\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n  let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n  if (formattingElementEntry) {\n    if (!p.openElements.contains(formattingElementEntry.element)) {\n      p.activeFormattingElements.removeEntry(formattingElementEntry);\n      formattingElementEntry = null;\n    } else if (!p.openElements.hasInScope(token.tagID)) {\n      formattingElementEntry = null;\n    }\n  } else {\n    genericEndTagInBody(p, token);\n  }\n  return formattingElementEntry;\n}\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n  let furthestBlock = null;\n  let idx = p.openElements.stackTop;\n  for (; idx >= 0; idx--) {\n    const element = p.openElements.items[idx];\n    if (element === formattingElementEntry.element) {\n      break;\n    }\n    if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {\n      furthestBlock = element;\n    }\n  }\n  if (!furthestBlock) {\n    p.openElements.shortenToLength(Math.max(idx, 0));\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n  }\n  return furthestBlock;\n}\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n  let lastElement = furthestBlock;\n  let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n  for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {\n    //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n    nextElement = p.openElements.getCommonAncestor(element);\n    const elementEntry = p.activeFormattingElements.getElementEntry(element);\n    const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n    const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n    if (shouldRemoveFromOpenElements) {\n      if (counterOverflow) {\n        p.activeFormattingElements.removeEntry(elementEntry);\n      }\n      p.openElements.remove(element);\n    } else {\n      element = aaRecreateElementFromEntry(p, elementEntry);\n      if (lastElement === furthestBlock) {\n        p.activeFormattingElements.bookmark = elementEntry;\n      }\n      p.treeAdapter.detachNode(lastElement);\n      p.treeAdapter.appendChild(element, lastElement);\n      lastElement = element;\n    }\n  }\n  return lastElement;\n}\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n  const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n  const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n  p.openElements.replace(elementEntry.element, newElement);\n  elementEntry.element = newElement;\n  return newElement;\n}\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n  const tn = p.treeAdapter.getTagName(commonAncestor);\n  const tid = getTagID(tn);\n  if (p._isElementCausesFosterParenting(tid)) {\n    p._fosterParentElement(lastElement);\n  } else {\n    const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n    if (tid === $.TEMPLATE && ns === NS.HTML) {\n      commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n    }\n    p.treeAdapter.appendChild(commonAncestor, lastElement);\n  }\n}\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n  const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n  const {\n    token\n  } = formattingElementEntry;\n  const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n  p._adoptNodes(furthestBlock, newElement);\n  p.treeAdapter.appendChild(furthestBlock, newElement);\n  p.activeFormattingElements.insertElementAfterBookmark(newElement, token);\n  p.activeFormattingElements.removeEntry(formattingElementEntry);\n  p.openElements.remove(formattingElementEntry.element);\n  p.openElements.insertAfter(furthestBlock, newElement, token.tagID);\n}\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n  for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {\n    const formattingElementEntry = aaObtainFormattingElementEntry(p, token);\n    if (!formattingElementEntry) {\n      break;\n    }\n    const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n    if (!furthestBlock) {\n      break;\n    }\n    p.activeFormattingElements.bookmark = formattingElementEntry;\n    const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n    const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n    p.treeAdapter.detachNode(lastElement);\n    if (commonAncestor) aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n    aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n  }\n}\n//Generic token handlers\n//------------------------------------------------------------------\nfunction appendComment(p, token) {\n  p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);\n}\nfunction appendCommentToRootHtmlElement(p, token) {\n  p._appendCommentNode(token, p.openElements.items[0]);\n}\nfunction appendCommentToDocument(p, token) {\n  p._appendCommentNode(token, p.document);\n}\nfunction stopParsing(p, token) {\n  p.stopped = true;\n  // NOTE: Set end locations for elements that remain on the open element stack.\n  if (token.location) {\n    // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.\n    // This is a problem, as we might overwrite their end position here.\n    const target = p.fragmentContext ? 0 : 2;\n    for (let i = p.openElements.stackTop; i >= target; i--) {\n      p._setEndLocation(p.openElements.items[i], token);\n    }\n    // Handle `html` and `body`\n    if (!p.fragmentContext && p.openElements.stackTop >= 0) {\n      const htmlElement = p.openElements.items[0];\n      const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);\n      if (htmlLocation && !htmlLocation.endTag) {\n        p._setEndLocation(htmlElement, token);\n        if (p.openElements.stackTop >= 1) {\n          const bodyElement = p.openElements.items[1];\n          const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);\n          if (bodyLocation && !bodyLocation.endTag) {\n            p._setEndLocation(bodyElement, token);\n          }\n        }\n      }\n    }\n  }\n}\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n  p._setDocumentType(token);\n  const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n  if (!doctype.isConforming(token)) {\n    p._err(token, ERR.nonConformingDoctype);\n  }\n  p.treeAdapter.setDocumentMode(p.document, mode);\n  p.insertionMode = InsertionMode.BEFORE_HTML;\n}\nfunction tokenInInitialMode(p, token) {\n  p._err(token, ERR.missingDoctype, true);\n  p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);\n  p.insertionMode = InsertionMode.BEFORE_HTML;\n  p._processToken(token);\n}\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n  if (token.tagID === $.HTML) {\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.BEFORE_HEAD;\n  } else {\n    tokenBeforeHtml(p, token);\n  }\n}\nfunction endTagBeforeHtml(p, token) {\n  const tn = token.tagID;\n  if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {\n    tokenBeforeHtml(p, token);\n  }\n}\nfunction tokenBeforeHtml(p, token) {\n  p._insertFakeRootElement();\n  p.insertionMode = InsertionMode.BEFORE_HEAD;\n  p._processToken(token);\n}\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case $.HEAD:\n      {\n        p._insertElement(token, NS.HTML);\n        p.headElement = p.openElements.current;\n        p.insertionMode = InsertionMode.IN_HEAD;\n        break;\n      }\n    default:\n      {\n        tokenBeforeHead(p, token);\n      }\n  }\n}\nfunction endTagBeforeHead(p, token) {\n  const tn = token.tagID;\n  if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {\n    tokenBeforeHead(p, token);\n  } else {\n    p._err(token, ERR.endTagWithoutMatchingOpenElement);\n  }\n}\nfunction tokenBeforeHead(p, token) {\n  p._insertFakeElement(TN.HEAD, $.HEAD);\n  p.headElement = p.openElements.current;\n  p.insertionMode = InsertionMode.IN_HEAD;\n  p._processToken(token);\n}\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case $.BASE:\n    case $.BASEFONT:\n    case $.BGSOUND:\n    case $.LINK:\n    case $.META:\n      {\n        p._appendElement(token, NS.HTML);\n        token.ackSelfClosing = true;\n        break;\n      }\n    case $.TITLE:\n      {\n        p._switchToTextParsing(token, TokenizerMode.RCDATA);\n        break;\n      }\n    case $.NOSCRIPT:\n      {\n        if (p.options.scriptingEnabled) {\n          p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n        } else {\n          p._insertElement(token, NS.HTML);\n          p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;\n        }\n        break;\n      }\n    case $.NOFRAMES:\n    case $.STYLE:\n      {\n        p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n        break;\n      }\n    case $.SCRIPT:\n      {\n        p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);\n        break;\n      }\n    case $.TEMPLATE:\n      {\n        p._insertTemplate(token);\n        p.activeFormattingElements.insertMarker();\n        p.framesetOk = false;\n        p.insertionMode = InsertionMode.IN_TEMPLATE;\n        p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n        break;\n      }\n    case $.HEAD:\n      {\n        p._err(token, ERR.misplacedStartTagForHeadElement);\n        break;\n      }\n    default:\n      {\n        tokenInHead(p, token);\n      }\n  }\n}\nfunction endTagInHead(p, token) {\n  switch (token.tagID) {\n    case $.HEAD:\n      {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.AFTER_HEAD;\n        break;\n      }\n    case $.BODY:\n    case $.BR:\n    case $.HTML:\n      {\n        tokenInHead(p, token);\n        break;\n      }\n    case $.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n    default:\n      {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n      }\n  }\n}\nfunction templateEndTagInHead(p, token) {\n  if (p.openElements.tmplCount > 0) {\n    p.openElements.generateImpliedEndTagsThoroughly();\n    if (p.openElements.currentTagId !== $.TEMPLATE) {\n      p._err(token, ERR.closingOfElementWithOpenChildElements);\n    }\n    p.openElements.popUntilTagNamePopped($.TEMPLATE);\n    p.activeFormattingElements.clearToLastMarker();\n    p.tmplInsertionModeStack.shift();\n    p._resetInsertionMode();\n  } else {\n    p._err(token, ERR.endTagWithoutMatchingOpenElement);\n  }\n}\nfunction tokenInHead(p, token) {\n  p.openElements.pop();\n  p.insertionMode = InsertionMode.AFTER_HEAD;\n  p._processToken(token);\n}\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case $.BASEFONT:\n    case $.BGSOUND:\n    case $.HEAD:\n    case $.LINK:\n    case $.META:\n    case $.NOFRAMES:\n    case $.STYLE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    case $.NOSCRIPT:\n      {\n        p._err(token, ERR.nestedNoscriptInHead);\n        break;\n      }\n    default:\n      {\n        tokenInHeadNoScript(p, token);\n      }\n  }\n}\nfunction endTagInHeadNoScript(p, token) {\n  switch (token.tagID) {\n    case $.NOSCRIPT:\n      {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.IN_HEAD;\n        break;\n      }\n    case $.BR:\n      {\n        tokenInHeadNoScript(p, token);\n        break;\n      }\n    default:\n      {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n      }\n  }\n}\nfunction tokenInHeadNoScript(p, token) {\n  const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;\n  p._err(token, errCode);\n  p.openElements.pop();\n  p.insertionMode = InsertionMode.IN_HEAD;\n  p._processToken(token);\n}\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case $.BODY:\n      {\n        p._insertElement(token, NS.HTML);\n        p.framesetOk = false;\n        p.insertionMode = InsertionMode.IN_BODY;\n        break;\n      }\n    case $.FRAMESET:\n      {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.IN_FRAMESET;\n        break;\n      }\n    case $.BASE:\n    case $.BASEFONT:\n    case $.BGSOUND:\n    case $.LINK:\n    case $.META:\n    case $.NOFRAMES:\n    case $.SCRIPT:\n    case $.STYLE:\n    case $.TEMPLATE:\n    case $.TITLE:\n      {\n        p._err(token, ERR.abandonedHeadElementChild);\n        p.openElements.push(p.headElement, $.HEAD);\n        startTagInHead(p, token);\n        p.openElements.remove(p.headElement);\n        break;\n      }\n    case $.HEAD:\n      {\n        p._err(token, ERR.misplacedStartTagForHeadElement);\n        break;\n      }\n    default:\n      {\n        tokenAfterHead(p, token);\n      }\n  }\n}\nfunction endTagAfterHead(p, token) {\n  switch (token.tagID) {\n    case $.BODY:\n    case $.HTML:\n    case $.BR:\n      {\n        tokenAfterHead(p, token);\n        break;\n      }\n    case $.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n    default:\n      {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n      }\n  }\n}\nfunction tokenAfterHead(p, token) {\n  p._insertFakeElement(TN.BODY, $.BODY);\n  p.insertionMode = InsertionMode.IN_BODY;\n  modeInBody(p, token);\n}\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction modeInBody(p, token) {\n  switch (token.type) {\n    case TokenType.CHARACTER:\n      {\n        characterInBody(p, token);\n        break;\n      }\n    case TokenType.WHITESPACE_CHARACTER:\n      {\n        whitespaceCharacterInBody(p, token);\n        break;\n      }\n    case TokenType.COMMENT:\n      {\n        appendComment(p, token);\n        break;\n      }\n    case TokenType.START_TAG:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case TokenType.END_TAG:\n      {\n        endTagInBody(p, token);\n        break;\n      }\n    case TokenType.EOF:\n      {\n        eofInBody(p, token);\n        break;\n      }\n    default:\n    // Do nothing\n  }\n}\nfunction whitespaceCharacterInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._insertCharacters(token);\n}\nfunction characterInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._insertCharacters(token);\n  p.framesetOk = false;\n}\nfunction htmlStartTagInBody(p, token) {\n  if (p.openElements.tmplCount === 0) {\n    p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n  }\n}\nfunction bodyStartTagInBody(p, token) {\n  const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n  if (bodyElement && p.openElements.tmplCount === 0) {\n    p.framesetOk = false;\n    p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n  }\n}\nfunction framesetStartTagInBody(p, token) {\n  const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n  if (p.framesetOk && bodyElement) {\n    p.treeAdapter.detachNode(bodyElement);\n    p.openElements.popAllUpToHtmlElement();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_FRAMESET;\n  }\n}\nfunction addressStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n  p._insertElement(token, NS.HTML);\n}\nfunction numberedHeaderStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n  if (p.openElements.currentTagId !== undefined && NUMBERED_HEADERS.has(p.openElements.currentTagId)) {\n    p.openElements.pop();\n  }\n  p._insertElement(token, NS.HTML);\n}\nfunction preStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n  p._insertElement(token, NS.HTML);\n  //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n  //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n  p.skipNextNewLine = true;\n  p.framesetOk = false;\n}\nfunction formStartTagInBody(p, token) {\n  const inTemplate = p.openElements.tmplCount > 0;\n  if (!p.formElement || inTemplate) {\n    if (p.openElements.hasInButtonScope($.P)) {\n      p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    if (!inTemplate) {\n      p.formElement = p.openElements.current;\n    }\n  }\n}\nfunction listItemStartTagInBody(p, token) {\n  p.framesetOk = false;\n  const tn = token.tagID;\n  for (let i = p.openElements.stackTop; i >= 0; i--) {\n    const elementId = p.openElements.tagIDs[i];\n    if (tn === $.LI && elementId === $.LI || (tn === $.DD || tn === $.DT) && (elementId === $.DD || elementId === $.DT)) {\n      p.openElements.generateImpliedEndTagsWithExclusion(elementId);\n      p.openElements.popUntilTagNamePopped(elementId);\n      break;\n    }\n    if (elementId !== $.ADDRESS && elementId !== $.DIV && elementId !== $.P && p._isSpecialElement(p.openElements.items[i], elementId)) {\n      break;\n    }\n  }\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n  p._insertElement(token, NS.HTML);\n}\nfunction plaintextStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n  p._insertElement(token, NS.HTML);\n  p.tokenizer.state = TokenizerMode.PLAINTEXT;\n}\nfunction buttonStartTagInBody(p, token) {\n  if (p.openElements.hasInScope($.BUTTON)) {\n    p.openElements.generateImpliedEndTags();\n    p.openElements.popUntilTagNamePopped($.BUTTON);\n  }\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, NS.HTML);\n  p.framesetOk = false;\n}\nfunction aStartTagInBody(p, token) {\n  const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TN.A);\n  if (activeElementEntry) {\n    callAdoptionAgency(p, token);\n    p.openElements.remove(activeElementEntry.element);\n    p.activeFormattingElements.removeEntry(activeElementEntry);\n  }\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, NS.HTML);\n  p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction bStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, NS.HTML);\n  p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction nobrStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  if (p.openElements.hasInScope($.NOBR)) {\n    callAdoptionAgency(p, token);\n    p._reconstructActiveFormattingElements();\n  }\n  p._insertElement(token, NS.HTML);\n  p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction appletStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, NS.HTML);\n  p.activeFormattingElements.insertMarker();\n  p.framesetOk = false;\n}\nfunction tableStartTagInBody(p, token) {\n  if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n  p._insertElement(token, NS.HTML);\n  p.framesetOk = false;\n  p.insertionMode = InsertionMode.IN_TABLE;\n}\nfunction areaStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._appendElement(token, NS.HTML);\n  p.framesetOk = false;\n  token.ackSelfClosing = true;\n}\nfunction isHiddenInput(token) {\n  const inputType = getTokenAttr(token, ATTRS.TYPE);\n  return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;\n}\nfunction inputStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._appendElement(token, NS.HTML);\n  if (!isHiddenInput(token)) {\n    p.framesetOk = false;\n  }\n  token.ackSelfClosing = true;\n}\nfunction paramStartTagInBody(p, token) {\n  p._appendElement(token, NS.HTML);\n  token.ackSelfClosing = true;\n}\nfunction hrStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n  p._appendElement(token, NS.HTML);\n  p.framesetOk = false;\n  token.ackSelfClosing = true;\n}\nfunction imageStartTagInBody(p, token) {\n  token.tagName = TN.IMG;\n  token.tagID = $.IMG;\n  areaStartTagInBody(p, token);\n}\nfunction textareaStartTagInBody(p, token) {\n  p._insertElement(token, NS.HTML);\n  //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n  //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n  p.skipNextNewLine = true;\n  p.tokenizer.state = TokenizerMode.RCDATA;\n  p.originalInsertionMode = p.insertionMode;\n  p.framesetOk = false;\n  p.insertionMode = InsertionMode.TEXT;\n}\nfunction xmpStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n  p._reconstructActiveFormattingElements();\n  p.framesetOk = false;\n  p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction iframeStartTagInBody(p, token) {\n  p.framesetOk = false;\n  p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\n//NOTE: here we assume that we always act as a user agent with enabled plugins/frames, so we parse\n//<noembed>/<noframes> as rawtext.\nfunction rawTextStartTagInBody(p, token) {\n  p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction selectStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, NS.HTML);\n  p.framesetOk = false;\n  p.insertionMode = p.insertionMode === InsertionMode.IN_TABLE || p.insertionMode === InsertionMode.IN_CAPTION || p.insertionMode === InsertionMode.IN_TABLE_BODY || p.insertionMode === InsertionMode.IN_ROW || p.insertionMode === InsertionMode.IN_CELL ? InsertionMode.IN_SELECT_IN_TABLE : InsertionMode.IN_SELECT;\n}\nfunction optgroupStartTagInBody(p, token) {\n  if (p.openElements.currentTagId === $.OPTION) {\n    p.openElements.pop();\n  }\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, NS.HTML);\n}\nfunction rbStartTagInBody(p, token) {\n  if (p.openElements.hasInScope($.RUBY)) {\n    p.openElements.generateImpliedEndTags();\n  }\n  p._insertElement(token, NS.HTML);\n}\nfunction rtStartTagInBody(p, token) {\n  if (p.openElements.hasInScope($.RUBY)) {\n    p.openElements.generateImpliedEndTagsWithExclusion($.RTC);\n  }\n  p._insertElement(token, NS.HTML);\n}\nfunction mathStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  foreignContent.adjustTokenMathMLAttrs(token);\n  foreignContent.adjustTokenXMLAttrs(token);\n  if (token.selfClosing) {\n    p._appendElement(token, NS.MATHML);\n  } else {\n    p._insertElement(token, NS.MATHML);\n  }\n  token.ackSelfClosing = true;\n}\nfunction svgStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  foreignContent.adjustTokenSVGAttrs(token);\n  foreignContent.adjustTokenXMLAttrs(token);\n  if (token.selfClosing) {\n    p._appendElement(token, NS.SVG);\n  } else {\n    p._insertElement(token, NS.SVG);\n  }\n  token.ackSelfClosing = true;\n}\nfunction genericStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, NS.HTML);\n}\nfunction startTagInBody(p, token) {\n  switch (token.tagID) {\n    case $.I:\n    case $.S:\n    case $.B:\n    case $.U:\n    case $.EM:\n    case $.TT:\n    case $.BIG:\n    case $.CODE:\n    case $.FONT:\n    case $.SMALL:\n    case $.STRIKE:\n    case $.STRONG:\n      {\n        bStartTagInBody(p, token);\n        break;\n      }\n    case $.A:\n      {\n        aStartTagInBody(p, token);\n        break;\n      }\n    case $.H1:\n    case $.H2:\n    case $.H3:\n    case $.H4:\n    case $.H5:\n    case $.H6:\n      {\n        numberedHeaderStartTagInBody(p, token);\n        break;\n      }\n    case $.P:\n    case $.DL:\n    case $.OL:\n    case $.UL:\n    case $.DIV:\n    case $.DIR:\n    case $.NAV:\n    case $.MAIN:\n    case $.MENU:\n    case $.ASIDE:\n    case $.CENTER:\n    case $.FIGURE:\n    case $.FOOTER:\n    case $.HEADER:\n    case $.HGROUP:\n    case $.DIALOG:\n    case $.DETAILS:\n    case $.ADDRESS:\n    case $.ARTICLE:\n    case $.SEARCH:\n    case $.SECTION:\n    case $.SUMMARY:\n    case $.FIELDSET:\n    case $.BLOCKQUOTE:\n    case $.FIGCAPTION:\n      {\n        addressStartTagInBody(p, token);\n        break;\n      }\n    case $.LI:\n    case $.DD:\n    case $.DT:\n      {\n        listItemStartTagInBody(p, token);\n        break;\n      }\n    case $.BR:\n    case $.IMG:\n    case $.WBR:\n    case $.AREA:\n    case $.EMBED:\n    case $.KEYGEN:\n      {\n        areaStartTagInBody(p, token);\n        break;\n      }\n    case $.HR:\n      {\n        hrStartTagInBody(p, token);\n        break;\n      }\n    case $.RB:\n    case $.RTC:\n      {\n        rbStartTagInBody(p, token);\n        break;\n      }\n    case $.RT:\n    case $.RP:\n      {\n        rtStartTagInBody(p, token);\n        break;\n      }\n    case $.PRE:\n    case $.LISTING:\n      {\n        preStartTagInBody(p, token);\n        break;\n      }\n    case $.XMP:\n      {\n        xmpStartTagInBody(p, token);\n        break;\n      }\n    case $.SVG:\n      {\n        svgStartTagInBody(p, token);\n        break;\n      }\n    case $.HTML:\n      {\n        htmlStartTagInBody(p, token);\n        break;\n      }\n    case $.BASE:\n    case $.LINK:\n    case $.META:\n    case $.STYLE:\n    case $.TITLE:\n    case $.SCRIPT:\n    case $.BGSOUND:\n    case $.BASEFONT:\n    case $.TEMPLATE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    case $.BODY:\n      {\n        bodyStartTagInBody(p, token);\n        break;\n      }\n    case $.FORM:\n      {\n        formStartTagInBody(p, token);\n        break;\n      }\n    case $.NOBR:\n      {\n        nobrStartTagInBody(p, token);\n        break;\n      }\n    case $.MATH:\n      {\n        mathStartTagInBody(p, token);\n        break;\n      }\n    case $.TABLE:\n      {\n        tableStartTagInBody(p, token);\n        break;\n      }\n    case $.INPUT:\n      {\n        inputStartTagInBody(p, token);\n        break;\n      }\n    case $.PARAM:\n    case $.TRACK:\n    case $.SOURCE:\n      {\n        paramStartTagInBody(p, token);\n        break;\n      }\n    case $.IMAGE:\n      {\n        imageStartTagInBody(p, token);\n        break;\n      }\n    case $.BUTTON:\n      {\n        buttonStartTagInBody(p, token);\n        break;\n      }\n    case $.APPLET:\n    case $.OBJECT:\n    case $.MARQUEE:\n      {\n        appletStartTagInBody(p, token);\n        break;\n      }\n    case $.IFRAME:\n      {\n        iframeStartTagInBody(p, token);\n        break;\n      }\n    case $.SELECT:\n      {\n        selectStartTagInBody(p, token);\n        break;\n      }\n    case $.OPTION:\n    case $.OPTGROUP:\n      {\n        optgroupStartTagInBody(p, token);\n        break;\n      }\n    case $.NOEMBED:\n    case $.NOFRAMES:\n      {\n        rawTextStartTagInBody(p, token);\n        break;\n      }\n    case $.FRAMESET:\n      {\n        framesetStartTagInBody(p, token);\n        break;\n      }\n    case $.TEXTAREA:\n      {\n        textareaStartTagInBody(p, token);\n        break;\n      }\n    case $.NOSCRIPT:\n      {\n        if (p.options.scriptingEnabled) {\n          rawTextStartTagInBody(p, token);\n        } else {\n          genericStartTagInBody(p, token);\n        }\n        break;\n      }\n    case $.PLAINTEXT:\n      {\n        plaintextStartTagInBody(p, token);\n        break;\n      }\n    case $.COL:\n    case $.TH:\n    case $.TD:\n    case $.TR:\n    case $.HEAD:\n    case $.FRAME:\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n    case $.CAPTION:\n    case $.COLGROUP:\n      {\n        // Ignore token\n        break;\n      }\n    default:\n      {\n        genericStartTagInBody(p, token);\n      }\n  }\n}\nfunction bodyEndTagInBody(p, token) {\n  if (p.openElements.hasInScope($.BODY)) {\n    p.insertionMode = InsertionMode.AFTER_BODY;\n    //NOTE: <body> is never popped from the stack, so we need to updated\n    //the end location explicitly.\n    if (p.options.sourceCodeLocationInfo) {\n      const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n      if (bodyElement) {\n        p._setEndLocation(bodyElement, token);\n      }\n    }\n  }\n}\nfunction htmlEndTagInBody(p, token) {\n  if (p.openElements.hasInScope($.BODY)) {\n    p.insertionMode = InsertionMode.AFTER_BODY;\n    endTagAfterBody(p, token);\n  }\n}\nfunction addressEndTagInBody(p, token) {\n  const tn = token.tagID;\n  if (p.openElements.hasInScope(tn)) {\n    p.openElements.generateImpliedEndTags();\n    p.openElements.popUntilTagNamePopped(tn);\n  }\n}\nfunction formEndTagInBody(p) {\n  const inTemplate = p.openElements.tmplCount > 0;\n  const {\n    formElement\n  } = p;\n  if (!inTemplate) {\n    p.formElement = null;\n  }\n  if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {\n    p.openElements.generateImpliedEndTags();\n    if (inTemplate) {\n      p.openElements.popUntilTagNamePopped($.FORM);\n    } else if (formElement) {\n      p.openElements.remove(formElement);\n    }\n  }\n}\nfunction pEndTagInBody(p) {\n  if (!p.openElements.hasInButtonScope($.P)) {\n    p._insertFakeElement(TN.P, $.P);\n  }\n  p._closePElement();\n}\nfunction liEndTagInBody(p) {\n  if (p.openElements.hasInListItemScope($.LI)) {\n    p.openElements.generateImpliedEndTagsWithExclusion($.LI);\n    p.openElements.popUntilTagNamePopped($.LI);\n  }\n}\nfunction ddEndTagInBody(p, token) {\n  const tn = token.tagID;\n  if (p.openElements.hasInScope(tn)) {\n    p.openElements.generateImpliedEndTagsWithExclusion(tn);\n    p.openElements.popUntilTagNamePopped(tn);\n  }\n}\nfunction numberedHeaderEndTagInBody(p) {\n  if (p.openElements.hasNumberedHeaderInScope()) {\n    p.openElements.generateImpliedEndTags();\n    p.openElements.popUntilNumberedHeaderPopped();\n  }\n}\nfunction appletEndTagInBody(p, token) {\n  const tn = token.tagID;\n  if (p.openElements.hasInScope(tn)) {\n    p.openElements.generateImpliedEndTags();\n    p.openElements.popUntilTagNamePopped(tn);\n    p.activeFormattingElements.clearToLastMarker();\n  }\n}\nfunction brEndTagInBody(p) {\n  p._reconstructActiveFormattingElements();\n  p._insertFakeElement(TN.BR, $.BR);\n  p.openElements.pop();\n  p.framesetOk = false;\n}\nfunction genericEndTagInBody(p, token) {\n  const tn = token.tagName;\n  const tid = token.tagID;\n  for (let i = p.openElements.stackTop; i > 0; i--) {\n    const element = p.openElements.items[i];\n    const elementId = p.openElements.tagIDs[i];\n    // Compare the tag name here, as the tag might not be a known tag with an ID.\n    if (tid === elementId && (tid !== $.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {\n      p.openElements.generateImpliedEndTagsWithExclusion(tid);\n      if (p.openElements.stackTop >= i) p.openElements.shortenToLength(i);\n      break;\n    }\n    if (p._isSpecialElement(element, elementId)) {\n      break;\n    }\n  }\n}\nfunction endTagInBody(p, token) {\n  switch (token.tagID) {\n    case $.A:\n    case $.B:\n    case $.I:\n    case $.S:\n    case $.U:\n    case $.EM:\n    case $.TT:\n    case $.BIG:\n    case $.CODE:\n    case $.FONT:\n    case $.NOBR:\n    case $.SMALL:\n    case $.STRIKE:\n    case $.STRONG:\n      {\n        callAdoptionAgency(p, token);\n        break;\n      }\n    case $.P:\n      {\n        pEndTagInBody(p);\n        break;\n      }\n    case $.DL:\n    case $.UL:\n    case $.OL:\n    case $.DIR:\n    case $.DIV:\n    case $.NAV:\n    case $.PRE:\n    case $.MAIN:\n    case $.MENU:\n    case $.ASIDE:\n    case $.BUTTON:\n    case $.CENTER:\n    case $.FIGURE:\n    case $.FOOTER:\n    case $.HEADER:\n    case $.HGROUP:\n    case $.DIALOG:\n    case $.ADDRESS:\n    case $.ARTICLE:\n    case $.DETAILS:\n    case $.SEARCH:\n    case $.SECTION:\n    case $.SUMMARY:\n    case $.LISTING:\n    case $.FIELDSET:\n    case $.BLOCKQUOTE:\n    case $.FIGCAPTION:\n      {\n        addressEndTagInBody(p, token);\n        break;\n      }\n    case $.LI:\n      {\n        liEndTagInBody(p);\n        break;\n      }\n    case $.DD:\n    case $.DT:\n      {\n        ddEndTagInBody(p, token);\n        break;\n      }\n    case $.H1:\n    case $.H2:\n    case $.H3:\n    case $.H4:\n    case $.H5:\n    case $.H6:\n      {\n        numberedHeaderEndTagInBody(p);\n        break;\n      }\n    case $.BR:\n      {\n        brEndTagInBody(p);\n        break;\n      }\n    case $.BODY:\n      {\n        bodyEndTagInBody(p, token);\n        break;\n      }\n    case $.HTML:\n      {\n        htmlEndTagInBody(p, token);\n        break;\n      }\n    case $.FORM:\n      {\n        formEndTagInBody(p);\n        break;\n      }\n    case $.APPLET:\n    case $.OBJECT:\n    case $.MARQUEE:\n      {\n        appletEndTagInBody(p, token);\n        break;\n      }\n    case $.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n    default:\n      {\n        genericEndTagInBody(p, token);\n      }\n  }\n}\nfunction eofInBody(p, token) {\n  if (p.tmplInsertionModeStack.length > 0) {\n    eofInTemplate(p, token);\n  } else {\n    stopParsing(p, token);\n  }\n}\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n  var _a;\n  if (token.tagID === $.SCRIPT) {\n    (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);\n  }\n  p.openElements.pop();\n  p.insertionMode = p.originalInsertionMode;\n}\nfunction eofInText(p, token) {\n  p._err(token, ERR.eofInElementThatCanContainOnlyText);\n  p.openElements.pop();\n  p.insertionMode = p.originalInsertionMode;\n  p.onEof(token);\n}\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n  if (p.openElements.currentTagId !== undefined && TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {\n    p.pendingCharacterTokens.length = 0;\n    p.hasNonWhitespacePendingCharacterToken = false;\n    p.originalInsertionMode = p.insertionMode;\n    p.insertionMode = InsertionMode.IN_TABLE_TEXT;\n    switch (token.type) {\n      case TokenType.CHARACTER:\n        {\n          characterInTableText(p, token);\n          break;\n        }\n      case TokenType.WHITESPACE_CHARACTER:\n        {\n          whitespaceCharacterInTableText(p, token);\n          break;\n        }\n      // Ignore null\n    }\n  } else {\n    tokenInTable(p, token);\n  }\n}\nfunction captionStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n  p.activeFormattingElements.insertMarker();\n  p._insertElement(token, NS.HTML);\n  p.insertionMode = InsertionMode.IN_CAPTION;\n}\nfunction colgroupStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n  p._insertElement(token, NS.HTML);\n  p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n}\nfunction colStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n  p._insertFakeElement(TN.COLGROUP, $.COLGROUP);\n  p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n  startTagInColumnGroup(p, token);\n}\nfunction tbodyStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n  p._insertElement(token, NS.HTML);\n  p.insertionMode = InsertionMode.IN_TABLE_BODY;\n}\nfunction tdStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n  p._insertFakeElement(TN.TBODY, $.TBODY);\n  p.insertionMode = InsertionMode.IN_TABLE_BODY;\n  startTagInTableBody(p, token);\n}\nfunction tableStartTagInTable(p, token) {\n  if (p.openElements.hasInTableScope($.TABLE)) {\n    p.openElements.popUntilTagNamePopped($.TABLE);\n    p._resetInsertionMode();\n    p._processStartTag(token);\n  }\n}\nfunction inputStartTagInTable(p, token) {\n  if (isHiddenInput(token)) {\n    p._appendElement(token, NS.HTML);\n  } else {\n    tokenInTable(p, token);\n  }\n  token.ackSelfClosing = true;\n}\nfunction formStartTagInTable(p, token) {\n  if (!p.formElement && p.openElements.tmplCount === 0) {\n    p._insertElement(token, NS.HTML);\n    p.formElement = p.openElements.current;\n    p.openElements.pop();\n  }\n}\nfunction startTagInTable(p, token) {\n  switch (token.tagID) {\n    case $.TD:\n    case $.TH:\n    case $.TR:\n      {\n        tdStartTagInTable(p, token);\n        break;\n      }\n    case $.STYLE:\n    case $.SCRIPT:\n    case $.TEMPLATE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    case $.COL:\n      {\n        colStartTagInTable(p, token);\n        break;\n      }\n    case $.FORM:\n      {\n        formStartTagInTable(p, token);\n        break;\n      }\n    case $.TABLE:\n      {\n        tableStartTagInTable(p, token);\n        break;\n      }\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n      {\n        tbodyStartTagInTable(p, token);\n        break;\n      }\n    case $.INPUT:\n      {\n        inputStartTagInTable(p, token);\n        break;\n      }\n    case $.CAPTION:\n      {\n        captionStartTagInTable(p, token);\n        break;\n      }\n    case $.COLGROUP:\n      {\n        colgroupStartTagInTable(p, token);\n        break;\n      }\n    default:\n      {\n        tokenInTable(p, token);\n      }\n  }\n}\nfunction endTagInTable(p, token) {\n  switch (token.tagID) {\n    case $.TABLE:\n      {\n        if (p.openElements.hasInTableScope($.TABLE)) {\n          p.openElements.popUntilTagNamePopped($.TABLE);\n          p._resetInsertionMode();\n        }\n        break;\n      }\n    case $.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n    case $.BODY:\n    case $.CAPTION:\n    case $.COL:\n    case $.COLGROUP:\n    case $.HTML:\n    case $.TBODY:\n    case $.TD:\n    case $.TFOOT:\n    case $.TH:\n    case $.THEAD:\n    case $.TR:\n      {\n        // Ignore token\n        break;\n      }\n    default:\n      {\n        tokenInTable(p, token);\n      }\n  }\n}\nfunction tokenInTable(p, token) {\n  const savedFosterParentingState = p.fosterParentingEnabled;\n  p.fosterParentingEnabled = true;\n  // Process token in `In Body` mode\n  modeInBody(p, token);\n  p.fosterParentingEnabled = savedFosterParentingState;\n}\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n  p.pendingCharacterTokens.push(token);\n}\nfunction characterInTableText(p, token) {\n  p.pendingCharacterTokens.push(token);\n  p.hasNonWhitespacePendingCharacterToken = true;\n}\nfunction tokenInTableText(p, token) {\n  let i = 0;\n  if (p.hasNonWhitespacePendingCharacterToken) {\n    for (; i < p.pendingCharacterTokens.length; i++) {\n      tokenInTable(p, p.pendingCharacterTokens[i]);\n    }\n  } else {\n    for (; i < p.pendingCharacterTokens.length; i++) {\n      p._insertCharacters(p.pendingCharacterTokens[i]);\n    }\n  }\n  p.insertionMode = p.originalInsertionMode;\n  p._processToken(token);\n}\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nconst TABLE_VOID_ELEMENTS = new Set([$.CAPTION, $.COL, $.COLGROUP, $.TBODY, $.TD, $.TFOOT, $.TH, $.THEAD, $.TR]);\nfunction startTagInCaption(p, token) {\n  const tn = token.tagID;\n  if (TABLE_VOID_ELEMENTS.has(tn)) {\n    if (p.openElements.hasInTableScope($.CAPTION)) {\n      p.openElements.generateImpliedEndTags();\n      p.openElements.popUntilTagNamePopped($.CAPTION);\n      p.activeFormattingElements.clearToLastMarker();\n      p.insertionMode = InsertionMode.IN_TABLE;\n      startTagInTable(p, token);\n    }\n  } else {\n    startTagInBody(p, token);\n  }\n}\nfunction endTagInCaption(p, token) {\n  const tn = token.tagID;\n  switch (tn) {\n    case $.CAPTION:\n    case $.TABLE:\n      {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n          p.openElements.generateImpliedEndTags();\n          p.openElements.popUntilTagNamePopped($.CAPTION);\n          p.activeFormattingElements.clearToLastMarker();\n          p.insertionMode = InsertionMode.IN_TABLE;\n          if (tn === $.TABLE) {\n            endTagInTable(p, token);\n          }\n        }\n        break;\n      }\n    case $.BODY:\n    case $.COL:\n    case $.COLGROUP:\n    case $.HTML:\n    case $.TBODY:\n    case $.TD:\n    case $.TFOOT:\n    case $.TH:\n    case $.THEAD:\n    case $.TR:\n      {\n        // Ignore token\n        break;\n      }\n    default:\n      {\n        endTagInBody(p, token);\n      }\n  }\n}\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case $.COL:\n      {\n        p._appendElement(token, NS.HTML);\n        token.ackSelfClosing = true;\n        break;\n      }\n    case $.TEMPLATE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    default:\n      {\n        tokenInColumnGroup(p, token);\n      }\n  }\n}\nfunction endTagInColumnGroup(p, token) {\n  switch (token.tagID) {\n    case $.COLGROUP:\n      {\n        if (p.openElements.currentTagId === $.COLGROUP) {\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE;\n        }\n        break;\n      }\n    case $.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n    case $.COL:\n      {\n        // Ignore token\n        break;\n      }\n    default:\n      {\n        tokenInColumnGroup(p, token);\n      }\n  }\n}\nfunction tokenInColumnGroup(p, token) {\n  if (p.openElements.currentTagId === $.COLGROUP) {\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.IN_TABLE;\n    p._processToken(token);\n  }\n}\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n  switch (token.tagID) {\n    case $.TR:\n      {\n        p.openElements.clearBackToTableBodyContext();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.IN_ROW;\n        break;\n      }\n    case $.TH:\n    case $.TD:\n      {\n        p.openElements.clearBackToTableBodyContext();\n        p._insertFakeElement(TN.TR, $.TR);\n        p.insertionMode = InsertionMode.IN_ROW;\n        startTagInRow(p, token);\n        break;\n      }\n    case $.CAPTION:\n    case $.COL:\n    case $.COLGROUP:\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n      {\n        if (p.openElements.hasTableBodyContextInTableScope()) {\n          p.openElements.clearBackToTableBodyContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE;\n          startTagInTable(p, token);\n        }\n        break;\n      }\n    default:\n      {\n        startTagInTable(p, token);\n      }\n  }\n}\nfunction endTagInTableBody(p, token) {\n  const tn = token.tagID;\n  switch (token.tagID) {\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n      {\n        if (p.openElements.hasInTableScope(tn)) {\n          p.openElements.clearBackToTableBodyContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE;\n        }\n        break;\n      }\n    case $.TABLE:\n      {\n        if (p.openElements.hasTableBodyContextInTableScope()) {\n          p.openElements.clearBackToTableBodyContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE;\n          endTagInTable(p, token);\n        }\n        break;\n      }\n    case $.BODY:\n    case $.CAPTION:\n    case $.COL:\n    case $.COLGROUP:\n    case $.HTML:\n    case $.TD:\n    case $.TH:\n    case $.TR:\n      {\n        // Ignore token\n        break;\n      }\n    default:\n      {\n        endTagInTable(p, token);\n      }\n  }\n}\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n  switch (token.tagID) {\n    case $.TH:\n    case $.TD:\n      {\n        p.openElements.clearBackToTableRowContext();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.IN_CELL;\n        p.activeFormattingElements.insertMarker();\n        break;\n      }\n    case $.CAPTION:\n    case $.COL:\n    case $.COLGROUP:\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n    case $.TR:\n      {\n        if (p.openElements.hasInTableScope($.TR)) {\n          p.openElements.clearBackToTableRowContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE_BODY;\n          startTagInTableBody(p, token);\n        }\n        break;\n      }\n    default:\n      {\n        startTagInTable(p, token);\n      }\n  }\n}\nfunction endTagInRow(p, token) {\n  switch (token.tagID) {\n    case $.TR:\n      {\n        if (p.openElements.hasInTableScope($.TR)) {\n          p.openElements.clearBackToTableRowContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE_BODY;\n        }\n        break;\n      }\n    case $.TABLE:\n      {\n        if (p.openElements.hasInTableScope($.TR)) {\n          p.openElements.clearBackToTableRowContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE_BODY;\n          endTagInTableBody(p, token);\n        }\n        break;\n      }\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n      {\n        if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope($.TR)) {\n          p.openElements.clearBackToTableRowContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE_BODY;\n          endTagInTableBody(p, token);\n        }\n        break;\n      }\n    case $.BODY:\n    case $.CAPTION:\n    case $.COL:\n    case $.COLGROUP:\n    case $.HTML:\n    case $.TD:\n    case $.TH:\n      {\n        // Ignore end tag\n        break;\n      }\n    default:\n      {\n        endTagInTable(p, token);\n      }\n  }\n}\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n  const tn = token.tagID;\n  if (TABLE_VOID_ELEMENTS.has(tn)) {\n    if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {\n      p._closeTableCell();\n      startTagInRow(p, token);\n    }\n  } else {\n    startTagInBody(p, token);\n  }\n}\nfunction endTagInCell(p, token) {\n  const tn = token.tagID;\n  switch (tn) {\n    case $.TD:\n    case $.TH:\n      {\n        if (p.openElements.hasInTableScope(tn)) {\n          p.openElements.generateImpliedEndTags();\n          p.openElements.popUntilTagNamePopped(tn);\n          p.activeFormattingElements.clearToLastMarker();\n          p.insertionMode = InsertionMode.IN_ROW;\n        }\n        break;\n      }\n    case $.TABLE:\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n    case $.TR:\n      {\n        if (p.openElements.hasInTableScope(tn)) {\n          p._closeTableCell();\n          endTagInRow(p, token);\n        }\n        break;\n      }\n    case $.BODY:\n    case $.CAPTION:\n    case $.COL:\n    case $.COLGROUP:\n    case $.HTML:\n      {\n        // Ignore token\n        break;\n      }\n    default:\n      {\n        endTagInBody(p, token);\n      }\n  }\n}\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case $.OPTION:\n      {\n        if (p.openElements.currentTagId === $.OPTION) {\n          p.openElements.pop();\n        }\n        p._insertElement(token, NS.HTML);\n        break;\n      }\n    case $.OPTGROUP:\n      {\n        if (p.openElements.currentTagId === $.OPTION) {\n          p.openElements.pop();\n        }\n        if (p.openElements.currentTagId === $.OPTGROUP) {\n          p.openElements.pop();\n        }\n        p._insertElement(token, NS.HTML);\n        break;\n      }\n    case $.HR:\n      {\n        if (p.openElements.currentTagId === $.OPTION) {\n          p.openElements.pop();\n        }\n        if (p.openElements.currentTagId === $.OPTGROUP) {\n          p.openElements.pop();\n        }\n        p._appendElement(token, NS.HTML);\n        token.ackSelfClosing = true;\n        break;\n      }\n    case $.INPUT:\n    case $.KEYGEN:\n    case $.TEXTAREA:\n    case $.SELECT:\n      {\n        if (p.openElements.hasInSelectScope($.SELECT)) {\n          p.openElements.popUntilTagNamePopped($.SELECT);\n          p._resetInsertionMode();\n          if (token.tagID !== $.SELECT) {\n            p._processStartTag(token);\n          }\n        }\n        break;\n      }\n    case $.SCRIPT:\n    case $.TEMPLATE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    default:\n    // Do nothing\n  }\n}\nfunction endTagInSelect(p, token) {\n  switch (token.tagID) {\n    case $.OPTGROUP:\n      {\n        if (p.openElements.stackTop > 0 && p.openElements.currentTagId === $.OPTION && p.openElements.tagIDs[p.openElements.stackTop - 1] === $.OPTGROUP) {\n          p.openElements.pop();\n        }\n        if (p.openElements.currentTagId === $.OPTGROUP) {\n          p.openElements.pop();\n        }\n        break;\n      }\n    case $.OPTION:\n      {\n        if (p.openElements.currentTagId === $.OPTION) {\n          p.openElements.pop();\n        }\n        break;\n      }\n    case $.SELECT:\n      {\n        if (p.openElements.hasInSelectScope($.SELECT)) {\n          p.openElements.popUntilTagNamePopped($.SELECT);\n          p._resetInsertionMode();\n        }\n        break;\n      }\n    case $.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n    default:\n    // Do nothing\n  }\n}\n// The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n  const tn = token.tagID;\n  if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {\n    p.openElements.popUntilTagNamePopped($.SELECT);\n    p._resetInsertionMode();\n    p._processStartTag(token);\n  } else {\n    startTagInSelect(p, token);\n  }\n}\nfunction endTagInSelectInTable(p, token) {\n  const tn = token.tagID;\n  if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {\n    if (p.openElements.hasInTableScope(tn)) {\n      p.openElements.popUntilTagNamePopped($.SELECT);\n      p._resetInsertionMode();\n      p.onEndTag(token);\n    }\n  } else {\n    endTagInSelect(p, token);\n  }\n}\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n  switch (token.tagID) {\n    // First, handle tags that can start without a mode change\n    case $.BASE:\n    case $.BASEFONT:\n    case $.BGSOUND:\n    case $.LINK:\n    case $.META:\n    case $.NOFRAMES:\n    case $.SCRIPT:\n    case $.STYLE:\n    case $.TEMPLATE:\n    case $.TITLE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    // Re-process the token in the appropriate mode\n    case $.CAPTION:\n    case $.COLGROUP:\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n      {\n        p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;\n        p.insertionMode = InsertionMode.IN_TABLE;\n        startTagInTable(p, token);\n        break;\n      }\n    case $.COL:\n      {\n        p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;\n        p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n        startTagInColumnGroup(p, token);\n        break;\n      }\n    case $.TR:\n      {\n        p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;\n        p.insertionMode = InsertionMode.IN_TABLE_BODY;\n        startTagInTableBody(p, token);\n        break;\n      }\n    case $.TD:\n    case $.TH:\n      {\n        p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;\n        p.insertionMode = InsertionMode.IN_ROW;\n        startTagInRow(p, token);\n        break;\n      }\n    default:\n      {\n        p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;\n        p.insertionMode = InsertionMode.IN_BODY;\n        startTagInBody(p, token);\n      }\n  }\n}\nfunction endTagInTemplate(p, token) {\n  if (token.tagID === $.TEMPLATE) {\n    templateEndTagInHead(p, token);\n  }\n}\nfunction eofInTemplate(p, token) {\n  if (p.openElements.tmplCount > 0) {\n    p.openElements.popUntilTagNamePopped($.TEMPLATE);\n    p.activeFormattingElements.clearToLastMarker();\n    p.tmplInsertionModeStack.shift();\n    p._resetInsertionMode();\n    p.onEof(token);\n  } else {\n    stopParsing(p, token);\n  }\n}\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n  if (token.tagID === $.HTML) {\n    startTagInBody(p, token);\n  } else {\n    tokenAfterBody(p, token);\n  }\n}\nfunction endTagAfterBody(p, token) {\n  var _a;\n  if (token.tagID === $.HTML) {\n    if (!p.fragmentContext) {\n      p.insertionMode = InsertionMode.AFTER_AFTER_BODY;\n    }\n    //NOTE: <html> is never popped from the stack, so we need to updated\n    //the end location explicitly.\n    if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === $.HTML) {\n      p._setEndLocation(p.openElements.items[0], token);\n      // Update the body element, if it doesn't have an end tag\n      const bodyElement = p.openElements.items[1];\n      if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {\n        p._setEndLocation(bodyElement, token);\n      }\n    }\n  } else {\n    tokenAfterBody(p, token);\n  }\n}\nfunction tokenAfterBody(p, token) {\n  p.insertionMode = InsertionMode.IN_BODY;\n  modeInBody(p, token);\n}\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case $.FRAMESET:\n      {\n        p._insertElement(token, NS.HTML);\n        break;\n      }\n    case $.FRAME:\n      {\n        p._appendElement(token, NS.HTML);\n        token.ackSelfClosing = true;\n        break;\n      }\n    case $.NOFRAMES:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    default:\n    // Do nothing\n  }\n}\nfunction endTagInFrameset(p, token) {\n  if (token.tagID === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n    p.openElements.pop();\n    if (!p.fragmentContext && p.openElements.currentTagId !== $.FRAMESET) {\n      p.insertionMode = InsertionMode.AFTER_FRAMESET;\n    }\n  }\n}\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case $.NOFRAMES:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    default:\n    // Do nothing\n  }\n}\nfunction endTagAfterFrameset(p, token) {\n  if (token.tagID === $.HTML) {\n    p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;\n  }\n}\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n  if (token.tagID === $.HTML) {\n    startTagInBody(p, token);\n  } else {\n    tokenAfterAfterBody(p, token);\n  }\n}\nfunction tokenAfterAfterBody(p, token) {\n  p.insertionMode = InsertionMode.IN_BODY;\n  modeInBody(p, token);\n}\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case $.NOFRAMES:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    default:\n    // Do nothing\n  }\n}\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n  token.chars = unicode.REPLACEMENT_CHARACTER;\n  p._insertCharacters(token);\n}\nfunction characterInForeignContent(p, token) {\n  p._insertCharacters(token);\n  p.framesetOk = false;\n}\nfunction popUntilHtmlOrIntegrationPoint(p) {\n  while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && p.openElements.currentTagId !== undefined && !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {\n    p.openElements.pop();\n  }\n}\nfunction startTagInForeignContent(p, token) {\n  if (foreignContent.causesExit(token)) {\n    popUntilHtmlOrIntegrationPoint(p);\n    p._startTagOutsideForeignContent(token);\n  } else {\n    const current = p._getAdjustedCurrentElement();\n    const currentNs = p.treeAdapter.getNamespaceURI(current);\n    if (currentNs === NS.MATHML) {\n      foreignContent.adjustTokenMathMLAttrs(token);\n    } else if (currentNs === NS.SVG) {\n      foreignContent.adjustTokenSVGTagName(token);\n      foreignContent.adjustTokenSVGAttrs(token);\n    }\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n      p._appendElement(token, currentNs);\n    } else {\n      p._insertElement(token, currentNs);\n    }\n    token.ackSelfClosing = true;\n  }\n}\nfunction endTagInForeignContent(p, token) {\n  if (token.tagID === $.P || token.tagID === $.BR) {\n    popUntilHtmlOrIntegrationPoint(p);\n    p._endTagOutsideForeignContent(token);\n    return;\n  }\n  for (let i = p.openElements.stackTop; i > 0; i--) {\n    const element = p.openElements.items[i];\n    if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {\n      p._endTagOutsideForeignContent(token);\n      break;\n    }\n    const tagName = p.treeAdapter.getTagName(element);\n    if (tagName.toLowerCase() === token.tagName) {\n      //NOTE: update the token tag name for `_setEndLocation`.\n      token.tagName = tagName;\n      p.openElements.shortenToLength(i);\n      break;\n    }\n  }\n}","map":{"version":3,"names":["Tokenizer","TokenizerMode","OpenElementStack","FormattingElementList","EntryType","defaultTreeAdapter","doctype","foreignContent","ERR","unicode","TAG_ID","$","TAG_NAMES","TN","NS","ATTRS","SPECIAL_ELEMENTS","DOCUMENT_MODE","NUMBERED_HEADERS","getTagID","TokenType","getTokenAttr","HIDDEN_INPUT_TYPE","AA_OUTER_LOOP_ITER","AA_INNER_LOOP_ITER","InsertionMode","BASE_LOC","startLine","startCol","startOffset","endLine","endCol","endOffset","TABLE_STRUCTURE_TAGS","Set","TABLE","TBODY","TFOOT","THEAD","TR","defaultParserOptions","scriptingEnabled","sourceCodeLocationInfo","treeAdapter","onParseError","Parser","constructor","options","document","fragmentContext","arguments","length","undefined","scriptHandler","currentToken","stopped","insertionMode","INITIAL","originalInsertionMode","headElement","formElement","currentNotInHTML","tmplInsertionModeStack","pendingCharacterTokens","hasNonWhitespacePendingCharacterToken","framesetOk","skipNextNewLine","fosterParentingEnabled","createDocument","tokenizer","activeFormattingElements","fragmentContextID","getTagName","UNKNOWN","_setContextModes","openElements","parse","html","parser","write","getFragmentParser","opts","createElement","TEMPLATE","HTML","documentMock","unshift","IN_TEMPLATE","_initTokenizerForFragmentParsing","_insertFakeRootElement","_resetInsertionMode","_findFormInFragmentContext","getFragment","rootElement","getFirstChild","fragment","createDocumentFragment","_adoptNodes","_err","token","code","beforeToken","_a","loc","location","err","onItemPush","node","tid","isTop","_b","call","stackTop","onItemPop","_setEndLocation","current","currentTagId","isHTML","getNamespaceURI","inForeignNode","_isIntegrationPoint","_switchToTextParsing","nextTokenizerState","_insertElement","state","TEXT","switchToPlaintextParsing","IN_BODY","PLAINTEXT","_getAdjustedCurrentElement","FORM","getParentNode","TITLE","TEXTAREA","RCDATA","STYLE","XMP","IFRAME","NOEMBED","NOFRAMES","NOSCRIPT","RAWTEXT","SCRIPT","SCRIPT_DATA","_setDocumentType","name","publicId","systemId","setDocumentType","documentChildren","getChildNodes","docTypeNode","find","isDocumentTypeNode","setNodeSourceCodeLocation","_attachElementToTree","element","startTag","_shouldFosterParentOnInsertion","_fosterParentElement","parent","currentTmplContentOrNode","appendChild","_appendElement","namespaceURI","tagName","attrs","push","tagID","_insertFakeElement","_insertTemplate","tmpl","content","setTemplateContent","_appendCommentNode","commentNode","createCommentNode","data","_insertCharacters","beforeElement","_findFosterParentingLocation","insertTextBefore","chars","insertText","siblings","textNodeIdx","lastIndexOf","textNode","tnLoc","getNodeSourceCodeLocation","updateNodeSourceCodeLocation","donor","recipient","child","detachNode","closingToken","ctLoc","tn","endLoc","type","END_TAG","endTag","shouldProcessStartTagTokenInForeignContent","SVG","ANNOTATION_XML","MATHML","MGLYPH","MALIGNMARK","_processToken","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","COMMENT","onComment","DOCTYPE","onDoctype","START_TAG","_processStartTag","onEndTag","EOF","onEof","WHITESPACE_CHARACTER","onWhitespaceCharacter","foreignNS","ns","getAttrList","isIntegrationPoint","_reconstructActiveFormattingElements","listLength","entries","endIndex","findIndex","entry","Marker","contains","unopenIdx","i","_closeTableCell","generateImpliedEndTags","popUntilTableCellPopped","clearToLastMarker","IN_ROW","_closePElement","generateImpliedEndTagsWithExclusion","P","popUntilTagNamePopped","tagIDs","IN_TABLE_BODY","CAPTION","IN_CAPTION","COLGROUP","IN_COLUMN_GROUP","IN_TABLE","BODY","FRAMESET","IN_FRAMESET","SELECT","_resetInsertionModeForSelect","AFTER_HEAD","BEFORE_HEAD","TD","TH","IN_CELL","HEAD","IN_HEAD","selectIdx","IN_SELECT_IN_TABLE","IN_SELECT","_isElementCausesFosterParenting","has","openElement","items","getTemplateContent","insertBefore","_isSpecialElement","id","characterInForeignContent","tokenInInitialMode","BEFORE_HTML","tokenBeforeHtml","tokenBeforeHead","tokenInHead","IN_HEAD_NO_SCRIPT","tokenInHeadNoScript","tokenAfterHead","characterInBody","characterInTable","IN_TABLE_TEXT","characterInTableText","tokenInColumnGroup","AFTER_BODY","tokenAfterBody","AFTER_AFTER_BODY","tokenAfterAfterBody","nullCharacterInForeignContent","appendComment","AFTER_FRAMESET","tokenInTableText","appendCommentToRootHtmlElement","AFTER_AFTER_FRAMESET","appendCommentToDocument","doctypeInInitialMode","misplacedDoctype","onStartTag","selfClosing","ackSelfClosing","nonVoidHtmlElementStartTagWithTrailingSolidus","startTagInForeignContent","_startTagOutsideForeignContent","startTagBeforeHtml","startTagBeforeHead","startTagInHead","startTagInHeadNoScript","startTagAfterHead","startTagInBody","startTagInTable","startTagInCaption","startTagInColumnGroup","startTagInTableBody","startTagInRow","startTagInCell","startTagInSelect","startTagInSelectInTable","startTagInTemplate","startTagAfterBody","startTagInFrameset","startTagAfterFrameset","startTagAfterAfterBody","startTagAfterAfterFrameset","endTagInForeignContent","_endTagOutsideForeignContent","endTagBeforeHtml","endTagBeforeHead","endTagInHead","endTagInHeadNoScript","endTagAfterHead","endTagInBody","endTagInText","endTagInTable","endTagInCaption","endTagInColumnGroup","endTagInTableBody","endTagInRow","endTagInCell","endTagInSelect","endTagInSelectInTable","endTagInTemplate","endTagAfterBody","endTagInFrameset","endTagAfterFrameset","eofInBody","eofInText","eofInTemplate","stopParsing","charCodeAt","CODE_POINTS","LINE_FEED","substr","whitespaceCharacterInBody","whitespaceCharacterInTableText","aaObtainFormattingElementEntry","p","formattingElementEntry","getElementEntryInScopeWithTagName","removeEntry","hasInScope","genericEndTagInBody","aaObtainFurthestBlock","furthestBlock","idx","shortenToLength","Math","max","aaInnerLoop","formattingElement","lastElement","nextElement","getCommonAncestor","elementEntry","getElementEntry","counterOverflow","shouldRemoveFromOpenElements","remove","aaRecreateElementFromEntry","bookmark","newElement","replace","aaInsertLastNodeInCommonAncestor","commonAncestor","aaReplaceFormattingElement","insertElementAfterBookmark","insertAfter","callAdoptionAgency","target","htmlElement","htmlLocation","bodyElement","bodyLocation","mode","forceQuirks","QUIRKS","getDocumentMode","isConforming","nonConformingDoctype","setDocumentMode","missingDoctype","BR","endTagWithoutMatchingOpenElement","BASE","BASEFONT","BGSOUND","LINK","META","insertMarker","misplacedStartTagForHeadElement","pop","templateEndTagInHead","tmplCount","generateImpliedEndTagsThoroughly","closingOfElementWithOpenChildElements","shift","nestedNoscriptInHead","errCode","openElementsLeftAfterEof","disallowedContentInNoscriptInHead","abandonedHeadElementChild","modeInBody","htmlStartTagInBody","adoptAttributes","bodyStartTagInBody","tryPeekProperlyNestedBodyElement","framesetStartTagInBody","popAllUpToHtmlElement","addressStartTagInBody","hasInButtonScope","numberedHeaderStartTagInBody","preStartTagInBody","formStartTagInBody","inTemplate","listItemStartTagInBody","elementId","LI","DD","DT","ADDRESS","DIV","plaintextStartTagInBody","buttonStartTagInBody","BUTTON","aStartTagInBody","activeElementEntry","A","pushElement","bStartTagInBody","nobrStartTagInBody","NOBR","appletStartTagInBody","tableStartTagInBody","areaStartTagInBody","isHiddenInput","inputType","TYPE","toLowerCase","inputStartTagInBody","paramStartTagInBody","hrStartTagInBody","imageStartTagInBody","IMG","textareaStartTagInBody","xmpStartTagInBody","iframeStartTagInBody","rawTextStartTagInBody","selectStartTagInBody","optgroupStartTagInBody","OPTION","rbStartTagInBody","RUBY","rtStartTagInBody","RTC","mathStartTagInBody","adjustTokenMathMLAttrs","adjustTokenXMLAttrs","svgStartTagInBody","adjustTokenSVGAttrs","genericStartTagInBody","I","S","B","U","EM","TT","BIG","CODE","FONT","SMALL","STRIKE","STRONG","H1","H2","H3","H4","H5","H6","DL","OL","UL","DIR","NAV","MAIN","MENU","ASIDE","CENTER","FIGURE","FOOTER","HEADER","HGROUP","DIALOG","DETAILS","ARTICLE","SEARCH","SECTION","SUMMARY","FIELDSET","BLOCKQUOTE","FIGCAPTION","WBR","AREA","EMBED","KEYGEN","HR","RB","RT","RP","PRE","LISTING","MATH","INPUT","PARAM","TRACK","SOURCE","IMAGE","APPLET","OBJECT","MARQUEE","OPTGROUP","COL","FRAME","bodyEndTagInBody","htmlEndTagInBody","addressEndTagInBody","formEndTagInBody","pEndTagInBody","liEndTagInBody","hasInListItemScope","ddEndTagInBody","numberedHeaderEndTagInBody","hasNumberedHeaderInScope","popUntilNumberedHeaderPopped","appletEndTagInBody","brEndTagInBody","eofInElementThatCanContainOnlyText","tokenInTable","captionStartTagInTable","clearBackToTableContext","colgroupStartTagInTable","colStartTagInTable","tbodyStartTagInTable","tdStartTagInTable","tableStartTagInTable","hasInTableScope","inputStartTagInTable","formStartTagInTable","savedFosterParentingState","TABLE_VOID_ELEMENTS","clearBackToTableBodyContext","hasTableBodyContextInTableScope","clearBackToTableRowContext","hasInSelectScope","isRootHtmlElementCurrent","REPLACEMENT_CHARACTER","popUntilHtmlOrIntegrationPoint","causesExit","currentNs","adjustTokenSVGTagName"],"sources":["/Users/mac/Documents/Career/Website/node_modules/hast-util-raw/node_modules/parse5/dist/parser/index.js"],"sourcesContent":["import { Tokenizer, TokenizerMode } from '../tokenizer/index.js';\nimport { OpenElementStack } from './open-element-stack.js';\nimport { FormattingElementList, EntryType } from './formatting-element-list.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\nimport * as doctype from '../common/doctype.js';\nimport * as foreignContent from '../common/foreign-content.js';\nimport { ERR } from '../common/error-codes.js';\nimport * as unicode from '../common/unicode.js';\nimport { TAG_ID as $, TAG_NAMES as TN, NS, ATTRS, SPECIAL_ELEMENTS, DOCUMENT_MODE, NUMBERED_HEADERS, getTagID, } from '../common/html.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\n//Misc constants\nconst HIDDEN_INPUT_TYPE = 'hidden';\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n//Insertion modes\nvar InsertionMode;\n(function (InsertionMode) {\n    InsertionMode[InsertionMode[\"INITIAL\"] = 0] = \"INITIAL\";\n    InsertionMode[InsertionMode[\"BEFORE_HTML\"] = 1] = \"BEFORE_HTML\";\n    InsertionMode[InsertionMode[\"BEFORE_HEAD\"] = 2] = \"BEFORE_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD\"] = 3] = \"IN_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD_NO_SCRIPT\"] = 4] = \"IN_HEAD_NO_SCRIPT\";\n    InsertionMode[InsertionMode[\"AFTER_HEAD\"] = 5] = \"AFTER_HEAD\";\n    InsertionMode[InsertionMode[\"IN_BODY\"] = 6] = \"IN_BODY\";\n    InsertionMode[InsertionMode[\"TEXT\"] = 7] = \"TEXT\";\n    InsertionMode[InsertionMode[\"IN_TABLE\"] = 8] = \"IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TABLE_TEXT\"] = 9] = \"IN_TABLE_TEXT\";\n    InsertionMode[InsertionMode[\"IN_CAPTION\"] = 10] = \"IN_CAPTION\";\n    InsertionMode[InsertionMode[\"IN_COLUMN_GROUP\"] = 11] = \"IN_COLUMN_GROUP\";\n    InsertionMode[InsertionMode[\"IN_TABLE_BODY\"] = 12] = \"IN_TABLE_BODY\";\n    InsertionMode[InsertionMode[\"IN_ROW\"] = 13] = \"IN_ROW\";\n    InsertionMode[InsertionMode[\"IN_CELL\"] = 14] = \"IN_CELL\";\n    InsertionMode[InsertionMode[\"IN_SELECT\"] = 15] = \"IN_SELECT\";\n    InsertionMode[InsertionMode[\"IN_SELECT_IN_TABLE\"] = 16] = \"IN_SELECT_IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TEMPLATE\"] = 17] = \"IN_TEMPLATE\";\n    InsertionMode[InsertionMode[\"AFTER_BODY\"] = 18] = \"AFTER_BODY\";\n    InsertionMode[InsertionMode[\"IN_FRAMESET\"] = 19] = \"IN_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_FRAMESET\"] = 20] = \"AFTER_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_BODY\"] = 21] = \"AFTER_AFTER_BODY\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_FRAMESET\"] = 22] = \"AFTER_AFTER_FRAMESET\";\n})(InsertionMode || (InsertionMode = {}));\nconst BASE_LOC = {\n    startLine: -1,\n    startCol: -1,\n    startOffset: -1,\n    endLine: -1,\n    endCol: -1,\n    endOffset: -1,\n};\nconst TABLE_STRUCTURE_TAGS = new Set([$.TABLE, $.TBODY, $.TFOOT, $.THEAD, $.TR]);\nconst defaultParserOptions = {\n    scriptingEnabled: true,\n    sourceCodeLocationInfo: false,\n    treeAdapter: defaultTreeAdapter,\n    onParseError: null,\n};\n//Parser\nexport class Parser {\n    constructor(options, document, \n    /** @internal */\n    fragmentContext = null, \n    /** @internal */\n    scriptHandler = null) {\n        this.fragmentContext = fragmentContext;\n        this.scriptHandler = scriptHandler;\n        this.currentToken = null;\n        this.stopped = false;\n        /** @internal */\n        this.insertionMode = InsertionMode.INITIAL;\n        /** @internal */\n        this.originalInsertionMode = InsertionMode.INITIAL;\n        /** @internal */\n        this.headElement = null;\n        /** @internal */\n        this.formElement = null;\n        /** Indicates that the current node is not an element in the HTML namespace */\n        this.currentNotInHTML = false;\n        /**\n         * The template insertion mode stack is maintained from the left.\n         * Ie. the topmost element will always have index 0.\n         *\n         * @internal\n         */\n        this.tmplInsertionModeStack = [];\n        /** @internal */\n        this.pendingCharacterTokens = [];\n        /** @internal */\n        this.hasNonWhitespacePendingCharacterToken = false;\n        /** @internal */\n        this.framesetOk = true;\n        /** @internal */\n        this.skipNextNewLine = false;\n        /** @internal */\n        this.fosterParentingEnabled = false;\n        this.options = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        this.treeAdapter = this.options.treeAdapter;\n        this.onParseError = this.options.onParseError;\n        // Always enable location info if we report parse errors.\n        if (this.onParseError) {\n            this.options.sourceCodeLocationInfo = true;\n        }\n        this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();\n        this.tokenizer = new Tokenizer(this.options, this);\n        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);\n        this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : $.UNKNOWN;\n        this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);\n        this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);\n    }\n    // API\n    static parse(html, options) {\n        const parser = new this(options);\n        parser.tokenizer.write(html, true);\n        return parser.document;\n    }\n    static getFragmentParser(fragmentContext, options) {\n        const opts = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        //NOTE: use a <template> element as the fragment context if no context element was provided,\n        //so we will parse in a \"forgiving\" manner\n        fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : (fragmentContext = opts.treeAdapter.createElement(TN.TEMPLATE, NS.HTML, []));\n        //NOTE: create a fake element which will be used as the `document` for fragment parsing.\n        //This is important for jsdom, where a new `document` cannot be created. This led to\n        //fragment parsing messing with the main `document`.\n        const documentMock = opts.treeAdapter.createElement('documentmock', NS.HTML, []);\n        const parser = new this(opts, documentMock, fragmentContext);\n        if (parser.fragmentContextID === $.TEMPLATE) {\n            parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n        }\n        parser._initTokenizerForFragmentParsing();\n        parser._insertFakeRootElement();\n        parser._resetInsertionMode();\n        parser._findFormInFragmentContext();\n        return parser;\n    }\n    getFragment() {\n        const rootElement = this.treeAdapter.getFirstChild(this.document);\n        const fragment = this.treeAdapter.createDocumentFragment();\n        this._adoptNodes(rootElement, fragment);\n        return fragment;\n    }\n    //Errors\n    /** @internal */\n    _err(token, code, beforeToken) {\n        var _a;\n        if (!this.onParseError)\n            return;\n        const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;\n        const err = {\n            code,\n            startLine: loc.startLine,\n            startCol: loc.startCol,\n            startOffset: loc.startOffset,\n            endLine: beforeToken ? loc.startLine : loc.endLine,\n            endCol: beforeToken ? loc.startCol : loc.endCol,\n            endOffset: beforeToken ? loc.startOffset : loc.endOffset,\n        };\n        this.onParseError(err);\n    }\n    //Stack events\n    /** @internal */\n    onItemPush(node, tid, isTop) {\n        var _a, _b;\n        (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n        if (isTop && this.openElements.stackTop > 0)\n            this._setContextModes(node, tid);\n    }\n    /** @internal */\n    onItemPop(node, isTop) {\n        var _a, _b;\n        if (this.options.sourceCodeLocationInfo) {\n            this._setEndLocation(node, this.currentToken);\n        }\n        (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);\n        if (isTop) {\n            let current;\n            let currentTagId;\n            if (this.openElements.stackTop === 0 && this.fragmentContext) {\n                current = this.fragmentContext;\n                currentTagId = this.fragmentContextID;\n            }\n            else {\n                ({ current, currentTagId } = this.openElements);\n            }\n            this._setContextModes(current, currentTagId);\n        }\n    }\n    _setContextModes(current, tid) {\n        const isHTML = current === this.document || (current && this.treeAdapter.getNamespaceURI(current) === NS.HTML);\n        this.currentNotInHTML = !isHTML;\n        this.tokenizer.inForeignNode =\n            !isHTML && current !== undefined && tid !== undefined && !this._isIntegrationPoint(tid, current);\n    }\n    /** @protected */\n    _switchToTextParsing(currentToken, nextTokenizerState) {\n        this._insertElement(currentToken, NS.HTML);\n        this.tokenizer.state = nextTokenizerState;\n        this.originalInsertionMode = this.insertionMode;\n        this.insertionMode = InsertionMode.TEXT;\n    }\n    switchToPlaintextParsing() {\n        this.insertionMode = InsertionMode.TEXT;\n        this.originalInsertionMode = InsertionMode.IN_BODY;\n        this.tokenizer.state = TokenizerMode.PLAINTEXT;\n    }\n    //Fragment parsing\n    /** @protected */\n    _getAdjustedCurrentElement() {\n        return this.openElements.stackTop === 0 && this.fragmentContext\n            ? this.fragmentContext\n            : this.openElements.current;\n    }\n    /** @protected */\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n        while (node) {\n            if (this.treeAdapter.getTagName(node) === TN.FORM) {\n                this.formElement = node;\n                break;\n            }\n            node = this.treeAdapter.getParentNode(node);\n        }\n    }\n    _initTokenizerForFragmentParsing() {\n        if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {\n            return;\n        }\n        switch (this.fragmentContextID) {\n            case $.TITLE:\n            case $.TEXTAREA: {\n                this.tokenizer.state = TokenizerMode.RCDATA;\n                break;\n            }\n            case $.STYLE:\n            case $.XMP:\n            case $.IFRAME:\n            case $.NOEMBED:\n            case $.NOFRAMES:\n            case $.NOSCRIPT: {\n                this.tokenizer.state = TokenizerMode.RAWTEXT;\n                break;\n            }\n            case $.SCRIPT: {\n                this.tokenizer.state = TokenizerMode.SCRIPT_DATA;\n                break;\n            }\n            case $.PLAINTEXT: {\n                this.tokenizer.state = TokenizerMode.PLAINTEXT;\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    //Tree mutation\n    /** @protected */\n    _setDocumentType(token) {\n        const name = token.name || '';\n        const publicId = token.publicId || '';\n        const systemId = token.systemId || '';\n        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n        if (token.location) {\n            const documentChildren = this.treeAdapter.getChildNodes(this.document);\n            const docTypeNode = documentChildren.find((node) => this.treeAdapter.isDocumentTypeNode(node));\n            if (docTypeNode) {\n                this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);\n            }\n        }\n    }\n    /** @protected */\n    _attachElementToTree(element, location) {\n        if (this.options.sourceCodeLocationInfo) {\n            const loc = location && {\n                ...location,\n                startTag: location,\n            };\n            this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n        }\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentElement(element);\n        }\n        else {\n            const parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.appendChild(parent !== null && parent !== void 0 ? parent : this.document, element);\n        }\n    }\n    /**\n     * For self-closing tags. Add an element to the tree, but skip adding it\n     * to the stack.\n     */\n    /** @protected */\n    _appendElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n    }\n    /** @protected */\n    _insertElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n        this.openElements.push(element, token.tagID);\n    }\n    /** @protected */\n    _insertFakeElement(tagName, tagID) {\n        const element = this.treeAdapter.createElement(tagName, NS.HTML, []);\n        this._attachElementToTree(element, null);\n        this.openElements.push(element, tagID);\n    }\n    /** @protected */\n    _insertTemplate(token) {\n        const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);\n        const content = this.treeAdapter.createDocumentFragment();\n        this.treeAdapter.setTemplateContent(tmpl, content);\n        this._attachElementToTree(tmpl, token.location);\n        this.openElements.push(tmpl, token.tagID);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(content, null);\n    }\n    /** @protected */\n    _insertFakeRootElement() {\n        const element = this.treeAdapter.createElement(TN.HTML, NS.HTML, []);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(element, null);\n        this.treeAdapter.appendChild(this.openElements.current, element);\n        this.openElements.push(element, $.HTML);\n    }\n    /** @protected */\n    _appendCommentNode(token, parent) {\n        const commentNode = this.treeAdapter.createCommentNode(token.data);\n        this.treeAdapter.appendChild(parent, commentNode);\n        if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n        }\n    }\n    /** @protected */\n    _insertCharacters(token) {\n        let parent;\n        let beforeElement;\n        if (this._shouldFosterParentOnInsertion()) {\n            ({ parent, beforeElement } = this._findFosterParentingLocation());\n            if (beforeElement) {\n                this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);\n            }\n            else {\n                this.treeAdapter.insertText(parent, token.chars);\n            }\n        }\n        else {\n            parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.insertText(parent, token.chars);\n        }\n        if (!token.location)\n            return;\n        const siblings = this.treeAdapter.getChildNodes(parent);\n        const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;\n        const textNode = siblings[textNodeIdx - 1];\n        //NOTE: if we have a location assigned by another token, then just update the end position\n        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n        if (tnLoc) {\n            const { endLine, endCol, endOffset } = token.location;\n            this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });\n        }\n        else if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n        }\n    }\n    /** @protected */\n    _adoptNodes(donor, recipient) {\n        for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {\n            this.treeAdapter.detachNode(child);\n            this.treeAdapter.appendChild(recipient, child);\n        }\n    }\n    /** @protected */\n    _setEndLocation(element, closingToken) {\n        if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {\n            const ctLoc = closingToken.location;\n            const tn = this.treeAdapter.getTagName(element);\n            const endLoc = \n            // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n            // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n            closingToken.type === TokenType.END_TAG && tn === closingToken.tagName\n                ? {\n                    endTag: { ...ctLoc },\n                    endLine: ctLoc.endLine,\n                    endCol: ctLoc.endCol,\n                    endOffset: ctLoc.endOffset,\n                }\n                : {\n                    endLine: ctLoc.startLine,\n                    endCol: ctLoc.startCol,\n                    endOffset: ctLoc.startOffset,\n                };\n            this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n        }\n    }\n    //Token processing\n    shouldProcessStartTagTokenInForeignContent(token) {\n        // Check that neither current === document, or ns === NS.HTML\n        if (!this.currentNotInHTML)\n            return false;\n        let current;\n        let currentTagId;\n        if (this.openElements.stackTop === 0 && this.fragmentContext) {\n            current = this.fragmentContext;\n            currentTagId = this.fragmentContextID;\n        }\n        else {\n            ({ current, currentTagId } = this.openElements);\n        }\n        if (token.tagID === $.SVG &&\n            this.treeAdapter.getTagName(current) === TN.ANNOTATION_XML &&\n            this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {\n            return false;\n        }\n        return (\n        // Check that `current` is not an integration point for HTML or MathML elements.\n        this.tokenizer.inForeignNode ||\n            // If it _is_ an integration point, then we might have to check that it is not an HTML\n            // integration point.\n            ((token.tagID === $.MGLYPH || token.tagID === $.MALIGNMARK) &&\n                currentTagId !== undefined &&\n                !this._isIntegrationPoint(currentTagId, current, NS.HTML)));\n    }\n    /** @protected */\n    _processToken(token) {\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                this.onCharacter(token);\n                break;\n            }\n            case TokenType.NULL_CHARACTER: {\n                this.onNullCharacter(token);\n                break;\n            }\n            case TokenType.COMMENT: {\n                this.onComment(token);\n                break;\n            }\n            case TokenType.DOCTYPE: {\n                this.onDoctype(token);\n                break;\n            }\n            case TokenType.START_TAG: {\n                this._processStartTag(token);\n                break;\n            }\n            case TokenType.END_TAG: {\n                this.onEndTag(token);\n                break;\n            }\n            case TokenType.EOF: {\n                this.onEof(token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                this.onWhitespaceCharacter(token);\n                break;\n            }\n        }\n    }\n    //Integration points\n    /** @protected */\n    _isIntegrationPoint(tid, element, foreignNS) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        const attrs = this.treeAdapter.getAttrList(element);\n        return foreignContent.isIntegrationPoint(tid, ns, attrs, foreignNS);\n    }\n    //Active formatting elements reconstruction\n    /** @protected */\n    _reconstructActiveFormattingElements() {\n        const listLength = this.activeFormattingElements.entries.length;\n        if (listLength) {\n            const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));\n            const unopenIdx = endIndex === -1 ? listLength - 1 : endIndex - 1;\n            for (let i = unopenIdx; i >= 0; i--) {\n                const entry = this.activeFormattingElements.entries[i];\n                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n                entry.element = this.openElements.current;\n            }\n        }\n    }\n    //Close elements\n    /** @protected */\n    _closeTableCell() {\n        this.openElements.generateImpliedEndTags();\n        this.openElements.popUntilTableCellPopped();\n        this.activeFormattingElements.clearToLastMarker();\n        this.insertionMode = InsertionMode.IN_ROW;\n    }\n    /** @protected */\n    _closePElement() {\n        this.openElements.generateImpliedEndTagsWithExclusion($.P);\n        this.openElements.popUntilTagNamePopped($.P);\n    }\n    //Insertion modes\n    /** @protected */\n    _resetInsertionMode() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            //Insertion mode reset map\n            switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {\n                case $.TR: {\n                    this.insertionMode = InsertionMode.IN_ROW;\n                    return;\n                }\n                case $.TBODY:\n                case $.THEAD:\n                case $.TFOOT: {\n                    this.insertionMode = InsertionMode.IN_TABLE_BODY;\n                    return;\n                }\n                case $.CAPTION: {\n                    this.insertionMode = InsertionMode.IN_CAPTION;\n                    return;\n                }\n                case $.COLGROUP: {\n                    this.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n                    return;\n                }\n                case $.TABLE: {\n                    this.insertionMode = InsertionMode.IN_TABLE;\n                    return;\n                }\n                case $.BODY: {\n                    this.insertionMode = InsertionMode.IN_BODY;\n                    return;\n                }\n                case $.FRAMESET: {\n                    this.insertionMode = InsertionMode.IN_FRAMESET;\n                    return;\n                }\n                case $.SELECT: {\n                    this._resetInsertionModeForSelect(i);\n                    return;\n                }\n                case $.TEMPLATE: {\n                    this.insertionMode = this.tmplInsertionModeStack[0];\n                    return;\n                }\n                case $.HTML: {\n                    this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;\n                    return;\n                }\n                case $.TD:\n                case $.TH: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_CELL;\n                        return;\n                    }\n                    break;\n                }\n                case $.HEAD: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_HEAD;\n                        return;\n                    }\n                    break;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_BODY;\n    }\n    /** @protected */\n    _resetInsertionModeForSelect(selectIdx) {\n        if (selectIdx > 0) {\n            for (let i = selectIdx - 1; i > 0; i--) {\n                const tn = this.openElements.tagIDs[i];\n                if (tn === $.TEMPLATE) {\n                    break;\n                }\n                else if (tn === $.TABLE) {\n                    this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;\n                    return;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_SELECT;\n    }\n    //Foster parenting\n    /** @protected */\n    _isElementCausesFosterParenting(tn) {\n        return TABLE_STRUCTURE_TAGS.has(tn);\n    }\n    /** @protected */\n    _shouldFosterParentOnInsertion() {\n        return (this.fosterParentingEnabled &&\n            this.openElements.currentTagId !== undefined &&\n            this._isElementCausesFosterParenting(this.openElements.currentTagId));\n    }\n    /** @protected */\n    _findFosterParentingLocation() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            const openElement = this.openElements.items[i];\n            switch (this.openElements.tagIDs[i]) {\n                case $.TEMPLATE: {\n                    if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {\n                        return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };\n                    }\n                    break;\n                }\n                case $.TABLE: {\n                    const parent = this.treeAdapter.getParentNode(openElement);\n                    if (parent) {\n                        return { parent, beforeElement: openElement };\n                    }\n                    return { parent: this.openElements.items[i - 1], beforeElement: null };\n                }\n                default:\n                // Do nothing\n            }\n        }\n        return { parent: this.openElements.items[0], beforeElement: null };\n    }\n    /** @protected */\n    _fosterParentElement(element) {\n        const location = this._findFosterParentingLocation();\n        if (location.beforeElement) {\n            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n        }\n        else {\n            this.treeAdapter.appendChild(location.parent, element);\n        }\n    }\n    //Special elements\n    /** @protected */\n    _isSpecialElement(element, id) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        return SPECIAL_ELEMENTS[ns].has(id);\n    }\n    /** @internal */\n    onCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            characterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE: {\n                characterInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                characterInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onNullCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            nullCharacterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onComment(token) {\n        this.skipNextNewLine = false;\n        if (this.currentNotInHTML) {\n            appendComment(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL:\n            case InsertionMode.BEFORE_HTML:\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                appendComment(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                appendCommentToRootHtmlElement(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                appendCommentToDocument(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onDoctype(token) {\n        this.skipNextNewLine = false;\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                doctypeInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD: {\n                this._err(token, ERR.misplacedDoctype);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onStartTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        this._processStartTag(token);\n        if (token.selfClosing && !token.ackSelfClosing) {\n            this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n        }\n    }\n    /**\n     * Processes a given start tag.\n     *\n     * `onStartTag` checks if a self-closing tag was recognized. When a token\n     * is moved inbetween multiple insertion modes, this check for self-closing\n     * could lead to false positives. To avoid this, `_processStartTag` is used\n     * for nested calls.\n     *\n     * @param token The token to process.\n     * @protected\n     */\n    _processStartTag(token) {\n        if (this.shouldProcessStartTagTokenInForeignContent(token)) {\n            startTagInForeignContent(this, token);\n        }\n        else {\n            this._startTagOutsideForeignContent(token);\n        }\n    }\n    /** @protected */\n    _startTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                startTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                startTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                startTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                startTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                startTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                startTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                startTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                startTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                startTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                startTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                startTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                startTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                startTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                startTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                startTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                startTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                startTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                startTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                startTagAfterAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                startTagAfterAfterFrameset(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onEndTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        if (this.currentNotInHTML) {\n            endTagInForeignContent(this, token);\n        }\n        else {\n            this._endTagOutsideForeignContent(token);\n        }\n    }\n    /** @protected */\n    _endTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                endTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                endTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                endTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                endTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                endTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                endTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                endTagInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                endTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                endTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                endTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                endTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                endTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                endTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                endTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                endTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                endTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                endTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                endTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                endTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onEof(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                eofInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                eofInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                eofInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                stopParsing(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onWhitespaceCharacter(token) {\n        if (this.skipNextNewLine) {\n            this.skipNextNewLine = false;\n            if (token.chars.charCodeAt(0) === unicode.CODE_POINTS.LINE_FEED) {\n                if (token.chars.length === 1) {\n                    return;\n                }\n                token.chars = token.chars.substr(1);\n            }\n        }\n        if (this.tokenizer.inForeignNode) {\n            this._insertCharacters(token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                whitespaceCharacterInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                whitespaceCharacterInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n}\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n    if (formattingElementEntry) {\n        if (!p.openElements.contains(formattingElementEntry.element)) {\n            p.activeFormattingElements.removeEntry(formattingElementEntry);\n            formattingElementEntry = null;\n        }\n        else if (!p.openElements.hasInScope(token.tagID)) {\n            formattingElementEntry = null;\n        }\n    }\n    else {\n        genericEndTagInBody(p, token);\n    }\n    return formattingElementEntry;\n}\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n    let furthestBlock = null;\n    let idx = p.openElements.stackTop;\n    for (; idx >= 0; idx--) {\n        const element = p.openElements.items[idx];\n        if (element === formattingElementEntry.element) {\n            break;\n        }\n        if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {\n            furthestBlock = element;\n        }\n    }\n    if (!furthestBlock) {\n        p.openElements.shortenToLength(Math.max(idx, 0));\n        p.activeFormattingElements.removeEntry(formattingElementEntry);\n    }\n    return furthestBlock;\n}\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n    let lastElement = furthestBlock;\n    let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n    for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {\n        //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n        nextElement = p.openElements.getCommonAncestor(element);\n        const elementEntry = p.activeFormattingElements.getElementEntry(element);\n        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n        if (shouldRemoveFromOpenElements) {\n            if (counterOverflow) {\n                p.activeFormattingElements.removeEntry(elementEntry);\n            }\n            p.openElements.remove(element);\n        }\n        else {\n            element = aaRecreateElementFromEntry(p, elementEntry);\n            if (lastElement === furthestBlock) {\n                p.activeFormattingElements.bookmark = elementEntry;\n            }\n            p.treeAdapter.detachNode(lastElement);\n            p.treeAdapter.appendChild(element, lastElement);\n            lastElement = element;\n        }\n    }\n    return lastElement;\n}\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n    p.openElements.replace(elementEntry.element, newElement);\n    elementEntry.element = newElement;\n    return newElement;\n}\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n    const tn = p.treeAdapter.getTagName(commonAncestor);\n    const tid = getTagID(tn);\n    if (p._isElementCausesFosterParenting(tid)) {\n        p._fosterParentElement(lastElement);\n    }\n    else {\n        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n        if (tid === $.TEMPLATE && ns === NS.HTML) {\n            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n        }\n        p.treeAdapter.appendChild(commonAncestor, lastElement);\n    }\n}\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n    const { token } = formattingElementEntry;\n    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n    p._adoptNodes(furthestBlock, newElement);\n    p.treeAdapter.appendChild(furthestBlock, newElement);\n    p.activeFormattingElements.insertElementAfterBookmark(newElement, token);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n    p.openElements.remove(formattingElementEntry.element);\n    p.openElements.insertAfter(furthestBlock, newElement, token.tagID);\n}\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n    for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {\n        const formattingElementEntry = aaObtainFormattingElementEntry(p, token);\n        if (!formattingElementEntry) {\n            break;\n        }\n        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n        if (!furthestBlock) {\n            break;\n        }\n        p.activeFormattingElements.bookmark = formattingElementEntry;\n        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n        p.treeAdapter.detachNode(lastElement);\n        if (commonAncestor)\n            aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n    }\n}\n//Generic token handlers\n//------------------------------------------------------------------\nfunction appendComment(p, token) {\n    p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);\n}\nfunction appendCommentToRootHtmlElement(p, token) {\n    p._appendCommentNode(token, p.openElements.items[0]);\n}\nfunction appendCommentToDocument(p, token) {\n    p._appendCommentNode(token, p.document);\n}\nfunction stopParsing(p, token) {\n    p.stopped = true;\n    // NOTE: Set end locations for elements that remain on the open element stack.\n    if (token.location) {\n        // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.\n        // This is a problem, as we might overwrite their end position here.\n        const target = p.fragmentContext ? 0 : 2;\n        for (let i = p.openElements.stackTop; i >= target; i--) {\n            p._setEndLocation(p.openElements.items[i], token);\n        }\n        // Handle `html` and `body`\n        if (!p.fragmentContext && p.openElements.stackTop >= 0) {\n            const htmlElement = p.openElements.items[0];\n            const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);\n            if (htmlLocation && !htmlLocation.endTag) {\n                p._setEndLocation(htmlElement, token);\n                if (p.openElements.stackTop >= 1) {\n                    const bodyElement = p.openElements.items[1];\n                    const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);\n                    if (bodyLocation && !bodyLocation.endTag) {\n                        p._setEndLocation(bodyElement, token);\n                    }\n                }\n            }\n        }\n    }\n}\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n    p._setDocumentType(token);\n    const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n    if (!doctype.isConforming(token)) {\n        p._err(token, ERR.nonConformingDoctype);\n    }\n    p.treeAdapter.setDocumentMode(p.document, mode);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n}\nfunction tokenInInitialMode(p, token) {\n    p._err(token, ERR.missingDoctype, true);\n    p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n    p._processToken(token);\n}\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n    if (token.tagID === $.HTML) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.BEFORE_HEAD;\n    }\n    else {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction endTagBeforeHtml(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction tokenBeforeHtml(p, token) {\n    p._insertFakeRootElement();\n    p.insertionMode = InsertionMode.BEFORE_HEAD;\n    p._processToken(token);\n}\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.HEAD: {\n            p._insertElement(token, NS.HTML);\n            p.headElement = p.openElements.current;\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        default: {\n            tokenBeforeHead(p, token);\n        }\n    }\n}\nfunction endTagBeforeHead(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {\n        tokenBeforeHead(p, token);\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenBeforeHead(p, token) {\n    p._insertFakeElement(TN.HEAD, $.HEAD);\n    p.headElement = p.openElements.current;\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TITLE: {\n            p._switchToTextParsing(token, TokenizerMode.RCDATA);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            }\n            else {\n                p._insertElement(token, NS.HTML);\n                p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;\n            }\n            break;\n        }\n        case $.NOFRAMES:\n        case $.STYLE: {\n            p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            break;\n        }\n        case $.SCRIPT: {\n            p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);\n            break;\n        }\n        case $.TEMPLATE: {\n            p._insertTemplate(token);\n            p.activeFormattingElements.insertMarker();\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_TEMPLATE;\n            p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenInHead(p, token);\n        }\n    }\n}\nfunction endTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HEAD: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.AFTER_HEAD;\n            break;\n        }\n        case $.BODY:\n        case $.BR:\n        case $.HTML: {\n            tokenInHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction templateEndTagInHead(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.generateImpliedEndTagsThoroughly();\n        if (p.openElements.currentTagId !== $.TEMPLATE) {\n            p._err(token, ERR.closingOfElementWithOpenChildElements);\n        }\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenInHead(p, token) {\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.AFTER_HEAD;\n    p._processToken(token);\n}\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.HEAD:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.STYLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            p._err(token, ERR.nestedNoscriptInHead);\n            break;\n        }\n        default: {\n            tokenInHeadNoScript(p, token);\n        }\n    }\n}\nfunction endTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.NOSCRIPT: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        case $.BR: {\n            tokenInHeadNoScript(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenInHeadNoScript(p, token) {\n    const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;\n    p._err(token, errCode);\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BODY: {\n            p._insertElement(token, NS.HTML);\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_BODY;\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_FRAMESET;\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            p._err(token, ERR.abandonedHeadElementChild);\n            p.openElements.push(p.headElement, $.HEAD);\n            startTagInHead(p, token);\n            p.openElements.remove(p.headElement);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenAfterHead(p, token);\n        }\n    }\n}\nfunction endTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.BODY:\n        case $.HTML:\n        case $.BR: {\n            tokenAfterHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenAfterHead(p, token) {\n    p._insertFakeElement(TN.BODY, $.BODY);\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction modeInBody(p, token) {\n    switch (token.type) {\n        case TokenType.CHARACTER: {\n            characterInBody(p, token);\n            break;\n        }\n        case TokenType.WHITESPACE_CHARACTER: {\n            whitespaceCharacterInBody(p, token);\n            break;\n        }\n        case TokenType.COMMENT: {\n            appendComment(p, token);\n            break;\n        }\n        case TokenType.START_TAG: {\n            startTagInBody(p, token);\n            break;\n        }\n        case TokenType.END_TAG: {\n            endTagInBody(p, token);\n            break;\n        }\n        case TokenType.EOF: {\n            eofInBody(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction whitespaceCharacterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n}\nfunction characterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction htmlStartTagInBody(p, token) {\n    if (p.openElements.tmplCount === 0) {\n        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n    }\n}\nfunction bodyStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (bodyElement && p.openElements.tmplCount === 0) {\n        p.framesetOk = false;\n        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n    }\n}\nfunction framesetStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (p.framesetOk && bodyElement) {\n        p.treeAdapter.detachNode(bodyElement);\n        p.openElements.popAllUpToHtmlElement();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.IN_FRAMESET;\n    }\n}\nfunction addressStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction numberedHeaderStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    if (p.openElements.currentTagId !== undefined && NUMBERED_HEADERS.has(p.openElements.currentTagId)) {\n        p.openElements.pop();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction preStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.framesetOk = false;\n}\nfunction formStartTagInBody(p, token) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    if (!p.formElement || inTemplate) {\n        if (p.openElements.hasInButtonScope($.P)) {\n            p._closePElement();\n        }\n        p._insertElement(token, NS.HTML);\n        if (!inTemplate) {\n            p.formElement = p.openElements.current;\n        }\n    }\n}\nfunction listItemStartTagInBody(p, token) {\n    p.framesetOk = false;\n    const tn = token.tagID;\n    for (let i = p.openElements.stackTop; i >= 0; i--) {\n        const elementId = p.openElements.tagIDs[i];\n        if ((tn === $.LI && elementId === $.LI) ||\n            ((tn === $.DD || tn === $.DT) && (elementId === $.DD || elementId === $.DT))) {\n            p.openElements.generateImpliedEndTagsWithExclusion(elementId);\n            p.openElements.popUntilTagNamePopped(elementId);\n            break;\n        }\n        if (elementId !== $.ADDRESS &&\n            elementId !== $.DIV &&\n            elementId !== $.P &&\n            p._isSpecialElement(p.openElements.items[i], elementId)) {\n            break;\n        }\n    }\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction plaintextStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.tokenizer.state = TokenizerMode.PLAINTEXT;\n}\nfunction buttonStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BUTTON)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped($.BUTTON);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n}\nfunction aStartTagInBody(p, token) {\n    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TN.A);\n    if (activeElementEntry) {\n        callAdoptionAgency(p, token);\n        p.openElements.remove(activeElementEntry.element);\n        p.activeFormattingElements.removeEntry(activeElementEntry);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction bStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction nobrStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    if (p.openElements.hasInScope($.NOBR)) {\n        callAdoptionAgency(p, token);\n        p._reconstructActiveFormattingElements();\n    }\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction appletStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.insertMarker();\n    p.framesetOk = false;\n}\nfunction tableStartTagInBody(p, token) {\n    if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.IN_TABLE;\n}\nfunction areaStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction isHiddenInput(token) {\n    const inputType = getTokenAttr(token, ATTRS.TYPE);\n    return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;\n}\nfunction inputStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    if (!isHiddenInput(token)) {\n        p.framesetOk = false;\n    }\n    token.ackSelfClosing = true;\n}\nfunction paramStartTagInBody(p, token) {\n    p._appendElement(token, NS.HTML);\n    token.ackSelfClosing = true;\n}\nfunction hrStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction imageStartTagInBody(p, token) {\n    token.tagName = TN.IMG;\n    token.tagID = $.IMG;\n    areaStartTagInBody(p, token);\n}\nfunction textareaStartTagInBody(p, token) {\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.tokenizer.state = TokenizerMode.RCDATA;\n    p.originalInsertionMode = p.insertionMode;\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.TEXT;\n}\nfunction xmpStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._reconstructActiveFormattingElements();\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction iframeStartTagInBody(p, token) {\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\n//NOTE: here we assume that we always act as a user agent with enabled plugins/frames, so we parse\n//<noembed>/<noframes> as rawtext.\nfunction rawTextStartTagInBody(p, token) {\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction selectStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode =\n        p.insertionMode === InsertionMode.IN_TABLE ||\n            p.insertionMode === InsertionMode.IN_CAPTION ||\n            p.insertionMode === InsertionMode.IN_TABLE_BODY ||\n            p.insertionMode === InsertionMode.IN_ROW ||\n            p.insertionMode === InsertionMode.IN_CELL\n            ? InsertionMode.IN_SELECT_IN_TABLE\n            : InsertionMode.IN_SELECT;\n}\nfunction optgroupStartTagInBody(p, token) {\n    if (p.openElements.currentTagId === $.OPTION) {\n        p.openElements.pop();\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction rbStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTags();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction rtStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.RTC);\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction mathStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenMathMLAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.MATHML);\n    }\n    else {\n        p._insertElement(token, NS.MATHML);\n    }\n    token.ackSelfClosing = true;\n}\nfunction svgStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenSVGAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.SVG);\n    }\n    else {\n        p._insertElement(token, NS.SVG);\n    }\n    token.ackSelfClosing = true;\n}\nfunction genericStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction startTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.I:\n        case $.S:\n        case $.B:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            bStartTagInBody(p, token);\n            break;\n        }\n        case $.A: {\n            aStartTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderStartTagInBody(p, token);\n            break;\n        }\n        case $.P:\n        case $.DL:\n        case $.OL:\n        case $.UL:\n        case $.DIV:\n        case $.DIR:\n        case $.NAV:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.DETAILS:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.SEARCH:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressStartTagInBody(p, token);\n            break;\n        }\n        case $.LI:\n        case $.DD:\n        case $.DT: {\n            listItemStartTagInBody(p, token);\n            break;\n        }\n        case $.BR:\n        case $.IMG:\n        case $.WBR:\n        case $.AREA:\n        case $.EMBED:\n        case $.KEYGEN: {\n            areaStartTagInBody(p, token);\n            break;\n        }\n        case $.HR: {\n            hrStartTagInBody(p, token);\n            break;\n        }\n        case $.RB:\n        case $.RTC: {\n            rbStartTagInBody(p, token);\n            break;\n        }\n        case $.RT:\n        case $.RP: {\n            rtStartTagInBody(p, token);\n            break;\n        }\n        case $.PRE:\n        case $.LISTING: {\n            preStartTagInBody(p, token);\n            break;\n        }\n        case $.XMP: {\n            xmpStartTagInBody(p, token);\n            break;\n        }\n        case $.SVG: {\n            svgStartTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlStartTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.LINK:\n        case $.META:\n        case $.STYLE:\n        case $.TITLE:\n        case $.SCRIPT:\n        case $.BGSOUND:\n        case $.BASEFONT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.BODY: {\n            bodyStartTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInBody(p, token);\n            break;\n        }\n        case $.NOBR: {\n            nobrStartTagInBody(p, token);\n            break;\n        }\n        case $.MATH: {\n            mathStartTagInBody(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInBody(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInBody(p, token);\n            break;\n        }\n        case $.PARAM:\n        case $.TRACK:\n        case $.SOURCE: {\n            paramStartTagInBody(p, token);\n            break;\n        }\n        case $.IMAGE: {\n            imageStartTagInBody(p, token);\n            break;\n        }\n        case $.BUTTON: {\n            buttonStartTagInBody(p, token);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletStartTagInBody(p, token);\n            break;\n        }\n        case $.IFRAME: {\n            iframeStartTagInBody(p, token);\n            break;\n        }\n        case $.SELECT: {\n            selectStartTagInBody(p, token);\n            break;\n        }\n        case $.OPTION:\n        case $.OPTGROUP: {\n            optgroupStartTagInBody(p, token);\n            break;\n        }\n        case $.NOEMBED:\n        case $.NOFRAMES: {\n            rawTextStartTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            framesetStartTagInBody(p, token);\n            break;\n        }\n        case $.TEXTAREA: {\n            textareaStartTagInBody(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                rawTextStartTagInBody(p, token);\n            }\n            else {\n                genericStartTagInBody(p, token);\n            }\n            break;\n        }\n        case $.PLAINTEXT: {\n            plaintextStartTagInBody(p, token);\n            break;\n        }\n        case $.COL:\n        case $.TH:\n        case $.TD:\n        case $.TR:\n        case $.HEAD:\n        case $.FRAME:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.CAPTION:\n        case $.COLGROUP: {\n            // Ignore token\n            break;\n        }\n        default: {\n            genericStartTagInBody(p, token);\n        }\n    }\n}\nfunction bodyEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        //NOTE: <body> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo) {\n            const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n            if (bodyElement) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n}\nfunction htmlEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        endTagAfterBody(p, token);\n    }\n}\nfunction addressEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction formEndTagInBody(p) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    const { formElement } = p;\n    if (!inTemplate) {\n        p.formElement = null;\n    }\n    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {\n        p.openElements.generateImpliedEndTags();\n        if (inTemplate) {\n            p.openElements.popUntilTagNamePopped($.FORM);\n        }\n        else if (formElement) {\n            p.openElements.remove(formElement);\n        }\n    }\n}\nfunction pEndTagInBody(p) {\n    if (!p.openElements.hasInButtonScope($.P)) {\n        p._insertFakeElement(TN.P, $.P);\n    }\n    p._closePElement();\n}\nfunction liEndTagInBody(p) {\n    if (p.openElements.hasInListItemScope($.LI)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.LI);\n        p.openElements.popUntilTagNamePopped($.LI);\n    }\n}\nfunction ddEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(tn);\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction numberedHeaderEndTagInBody(p) {\n    if (p.openElements.hasNumberedHeaderInScope()) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilNumberedHeaderPopped();\n    }\n}\nfunction appletEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n        p.activeFormattingElements.clearToLastMarker();\n    }\n}\nfunction brEndTagInBody(p) {\n    p._reconstructActiveFormattingElements();\n    p._insertFakeElement(TN.BR, $.BR);\n    p.openElements.pop();\n    p.framesetOk = false;\n}\nfunction genericEndTagInBody(p, token) {\n    const tn = token.tagName;\n    const tid = token.tagID;\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        const elementId = p.openElements.tagIDs[i];\n        // Compare the tag name here, as the tag might not be a known tag with an ID.\n        if (tid === elementId && (tid !== $.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {\n            p.openElements.generateImpliedEndTagsWithExclusion(tid);\n            if (p.openElements.stackTop >= i)\n                p.openElements.shortenToLength(i);\n            break;\n        }\n        if (p._isSpecialElement(element, elementId)) {\n            break;\n        }\n    }\n}\nfunction endTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.A:\n        case $.B:\n        case $.I:\n        case $.S:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.NOBR:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            callAdoptionAgency(p, token);\n            break;\n        }\n        case $.P: {\n            pEndTagInBody(p);\n            break;\n        }\n        case $.DL:\n        case $.UL:\n        case $.OL:\n        case $.DIR:\n        case $.DIV:\n        case $.NAV:\n        case $.PRE:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.BUTTON:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.DETAILS:\n        case $.SEARCH:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.LISTING:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressEndTagInBody(p, token);\n            break;\n        }\n        case $.LI: {\n            liEndTagInBody(p);\n            break;\n        }\n        case $.DD:\n        case $.DT: {\n            ddEndTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderEndTagInBody(p);\n            break;\n        }\n        case $.BR: {\n            brEndTagInBody(p);\n            break;\n        }\n        case $.BODY: {\n            bodyEndTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlEndTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formEndTagInBody(p);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletEndTagInBody(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            genericEndTagInBody(p, token);\n        }\n    }\n}\nfunction eofInBody(p, token) {\n    if (p.tmplInsertionModeStack.length > 0) {\n        eofInTemplate(p, token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n    var _a;\n    if (token.tagID === $.SCRIPT) {\n        (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);\n    }\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n}\nfunction eofInText(p, token) {\n    p._err(token, ERR.eofInElementThatCanContainOnlyText);\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n    p.onEof(token);\n}\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n    if (p.openElements.currentTagId !== undefined && TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {\n        p.pendingCharacterTokens.length = 0;\n        p.hasNonWhitespacePendingCharacterToken = false;\n        p.originalInsertionMode = p.insertionMode;\n        p.insertionMode = InsertionMode.IN_TABLE_TEXT;\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                characterInTableText(p, token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                whitespaceCharacterInTableText(p, token);\n                break;\n            }\n            // Ignore null\n        }\n    }\n    else {\n        tokenInTable(p, token);\n    }\n}\nfunction captionStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p.activeFormattingElements.insertMarker();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_CAPTION;\n}\nfunction colgroupStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n}\nfunction colStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.COLGROUP, $.COLGROUP);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n    startTagInColumnGroup(p, token);\n}\nfunction tbodyStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n}\nfunction tdStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.TBODY, $.TBODY);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n    startTagInTableBody(p, token);\n}\nfunction tableStartTagInTable(p, token) {\n    if (p.openElements.hasInTableScope($.TABLE)) {\n        p.openElements.popUntilTagNamePopped($.TABLE);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n}\nfunction inputStartTagInTable(p, token) {\n    if (isHiddenInput(token)) {\n        p._appendElement(token, NS.HTML);\n    }\n    else {\n        tokenInTable(p, token);\n    }\n    token.ackSelfClosing = true;\n}\nfunction formStartTagInTable(p, token) {\n    if (!p.formElement && p.openElements.tmplCount === 0) {\n        p._insertElement(token, NS.HTML);\n        p.formElement = p.openElements.current;\n        p.openElements.pop();\n    }\n}\nfunction startTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            tdStartTagInTable(p, token);\n            break;\n        }\n        case $.STYLE:\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            colStartTagInTable(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInTable(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInTable(p, token);\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            tbodyStartTagInTable(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInTable(p, token);\n            break;\n        }\n        case $.CAPTION: {\n            captionStartTagInTable(p, token);\n            break;\n        }\n        case $.COLGROUP: {\n            colgroupStartTagInTable(p, token);\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction endTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TABLE)) {\n                p.openElements.popUntilTagNamePopped($.TABLE);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction tokenInTable(p, token) {\n    const savedFosterParentingState = p.fosterParentingEnabled;\n    p.fosterParentingEnabled = true;\n    // Process token in `In Body` mode\n    modeInBody(p, token);\n    p.fosterParentingEnabled = savedFosterParentingState;\n}\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n}\nfunction characterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n    p.hasNonWhitespacePendingCharacterToken = true;\n}\nfunction tokenInTableText(p, token) {\n    let i = 0;\n    if (p.hasNonWhitespacePendingCharacterToken) {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            tokenInTable(p, p.pendingCharacterTokens[i]);\n        }\n    }\n    else {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            p._insertCharacters(p.pendingCharacterTokens[i]);\n        }\n    }\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nconst TABLE_VOID_ELEMENTS = new Set([$.CAPTION, $.COL, $.COLGROUP, $.TBODY, $.TD, $.TFOOT, $.TH, $.THEAD, $.TR]);\nfunction startTagInCaption(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped($.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCaption(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.CAPTION:\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.CAPTION)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped($.CAPTION);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                if (tn === $.TABLE) {\n                    endTagInTable(p, token);\n                }\n            }\n            break;\n        }\n        case $.BODY:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.COL: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction endTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.COLGROUP: {\n            if (p.openElements.currentTagId === $.COLGROUP) {\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction tokenInColumnGroup(p, token) {\n    if (p.openElements.currentTagId === $.COLGROUP) {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.IN_TABLE;\n        p._processToken(token);\n    }\n}\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_ROW;\n            break;\n        }\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertFakeElement(TN.TR, $.TR);\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                startTagInTable(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInTableBody(p, token) {\n    const tn = token.tagID;\n    switch (token.tagID) {\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                endTagInTable(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableRowContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_CELL;\n            p.activeFormattingElements.insertMarker();\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                startTagInTableBody(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH: {\n            // Ignore end tag\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {\n            p._closeTableCell();\n            startTagInRow(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCell(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.TD:\n        case $.TH: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped(tn);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_ROW;\n            }\n            break;\n        }\n        case $.TABLE:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p._closeTableCell();\n                endTagInRow(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.OPTGROUP: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.HR: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.INPUT:\n        case $.KEYGEN:\n        case $.TEXTAREA:\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n                if (token.tagID !== $.SELECT) {\n                    p._processStartTag(token);\n                }\n            }\n            break;\n        }\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.OPTGROUP: {\n            if (p.openElements.stackTop > 0 &&\n                p.openElements.currentTagId === $.OPTION &&\n                p.openElements.tagIDs[p.openElements.stackTop - 1] === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        p.openElements.popUntilTagNamePopped($.SELECT);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n    else {\n        startTagInSelect(p, token);\n    }\n}\nfunction endTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.popUntilTagNamePopped($.SELECT);\n            p._resetInsertionMode();\n            p.onEndTag(token);\n        }\n    }\n    else {\n        endTagInSelect(p, token);\n    }\n}\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n    switch (token.tagID) {\n        // First, handle tags that can start without a mode change\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        // Re-process the token in the appropriate mode\n        case $.CAPTION:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n            break;\n        }\n        case $.COL: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;\n            p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n            startTagInColumnGroup(p, token);\n            break;\n        }\n        case $.TR: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;\n            p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            startTagInTableBody(p, token);\n            break;\n        }\n        case $.TD:\n        case $.TH: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        default: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;\n            p.insertionMode = InsertionMode.IN_BODY;\n            startTagInBody(p, token);\n        }\n    }\n}\nfunction endTagInTemplate(p, token) {\n    if (token.tagID === $.TEMPLATE) {\n        templateEndTagInHead(p, token);\n    }\n}\nfunction eofInTemplate(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n        p.onEof(token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction endTagAfterBody(p, token) {\n    var _a;\n    if (token.tagID === $.HTML) {\n        if (!p.fragmentContext) {\n            p.insertionMode = InsertionMode.AFTER_AFTER_BODY;\n        }\n        //NOTE: <html> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === $.HTML) {\n            p._setEndLocation(p.openElements.items[0], token);\n            // Update the body element, if it doesn't have an end tag\n            const bodyElement = p.openElements.items[1];\n            if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction tokenAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.FRAME: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInFrameset(p, token) {\n    if (token.tagID === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n        p.openElements.pop();\n        if (!p.fragmentContext && p.openElements.currentTagId !== $.FRAMESET) {\n            p.insertionMode = InsertionMode.AFTER_FRAMESET;\n        }\n    }\n}\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagAfterFrameset(p, token) {\n    if (token.tagID === $.HTML) {\n        p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;\n    }\n}\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterAfterBody(p, token);\n    }\n}\nfunction tokenAfterAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n    token.chars = unicode.REPLACEMENT_CHARACTER;\n    p._insertCharacters(token);\n}\nfunction characterInForeignContent(p, token) {\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction popUntilHtmlOrIntegrationPoint(p) {\n    while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&\n        p.openElements.currentTagId !== undefined &&\n        !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {\n        p.openElements.pop();\n    }\n}\nfunction startTagInForeignContent(p, token) {\n    if (foreignContent.causesExit(token)) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._startTagOutsideForeignContent(token);\n    }\n    else {\n        const current = p._getAdjustedCurrentElement();\n        const currentNs = p.treeAdapter.getNamespaceURI(current);\n        if (currentNs === NS.MATHML) {\n            foreignContent.adjustTokenMathMLAttrs(token);\n        }\n        else if (currentNs === NS.SVG) {\n            foreignContent.adjustTokenSVGTagName(token);\n            foreignContent.adjustTokenSVGAttrs(token);\n        }\n        foreignContent.adjustTokenXMLAttrs(token);\n        if (token.selfClosing) {\n            p._appendElement(token, currentNs);\n        }\n        else {\n            p._insertElement(token, currentNs);\n        }\n        token.ackSelfClosing = true;\n    }\n}\nfunction endTagInForeignContent(p, token) {\n    if (token.tagID === $.P || token.tagID === $.BR) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._endTagOutsideForeignContent(token);\n        return;\n    }\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {\n            p._endTagOutsideForeignContent(token);\n            break;\n        }\n        const tagName = p.treeAdapter.getTagName(element);\n        if (tagName.toLowerCase() === token.tagName) {\n            //NOTE: update the token tag name for `_setEndLocation`.\n            token.tagName = tagName;\n            p.openElements.shortenToLength(i);\n            break;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}